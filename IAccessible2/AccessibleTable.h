/*** Autogenerated by WIDL 3.20 from /home/pospeselr/Code/Tor/tor-browser/other-licenses/ia2/AccessibleTable.idl - Do not edit ***/

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __accessibletable_h__
#define __accessibletable_h__

/* Forward declarations */

#ifndef __IAccessibleTable_FWD_DEFINED__
#define __IAccessibleTable_FWD_DEFINED__
typedef interface IAccessibleTable IAccessibleTable;
#ifdef __cplusplus
interface IAccessibleTable;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <objidl.h>
#include <oaidl.h>
#include <oleacc.h>
#include <Accessible2.h>
#include <IA2CommonTypes.h>

#ifdef __cplusplus
extern "C" {
#endif

/*****************************************************************************
 * IAccessibleTable interface
 */
#ifndef __IAccessibleTable_INTERFACE_DEFINED__
#define __IAccessibleTable_INTERFACE_DEFINED__

DEFINE_GUID(IID_IAccessibleTable, 0x35ad8070, 0xc20c, 0x4fb4, 0xb0,0x94, 0xf4,0xf7,0x27,0x5d,0xd4,0x69);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("35ad8070-c20c-4fb4-b094-f4f7275dd469")
IAccessibleTable : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE get_accessibleAt(
        LONG row,
        LONG column,
        IUnknown **accessible) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_caption(
        IUnknown **accessible) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_childIndex(
        LONG rowIndex,
        LONG columnIndex,
        LONG *cellIndex) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_columnDescription(
        LONG column,
        BSTR *description) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_columnExtentAt(
        LONG row,
        LONG column,
        LONG *nColumnsSpanned) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_columnHeader(
        IAccessibleTable **accessibleTable,
        LONG *startingRowIndex) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_columnIndex(
        LONG cellIndex,
        LONG *columnIndex) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_nColumns(
        LONG *columnCount) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_nRows(
        LONG *rowCount) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_nSelectedChildren(
        LONG *cellCount) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_nSelectedColumns(
        LONG *columnCount) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_nSelectedRows(
        LONG *rowCount) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_rowDescription(
        LONG row,
        BSTR *description) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_rowExtentAt(
        LONG row,
        LONG column,
        LONG *nRowsSpanned) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_rowHeader(
        IAccessibleTable **accessibleTable,
        LONG *startingColumnIndex) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_rowIndex(
        LONG cellIndex,
        LONG *rowIndex) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_selectedChildren(
        LONG maxChildren,
        LONG **children,
        LONG *nChildren) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_selectedColumns(
        LONG maxColumns,
        LONG **columns,
        LONG *nColumns) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_selectedRows(
        LONG maxRows,
        LONG **rows,
        LONG *nRows) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_summary(
        IUnknown **accessible) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_isColumnSelected(
        LONG column,
        boolean *isSelected) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_isRowSelected(
        LONG row,
        boolean *isSelected) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_isSelected(
        LONG row,
        LONG column,
        boolean *isSelected) = 0;

    virtual HRESULT STDMETHODCALLTYPE selectRow(
        LONG row) = 0;

    virtual HRESULT STDMETHODCALLTYPE selectColumn(
        LONG column) = 0;

    virtual HRESULT STDMETHODCALLTYPE unselectRow(
        LONG row) = 0;

    virtual HRESULT STDMETHODCALLTYPE unselectColumn(
        LONG column) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_rowColumnExtentsAtIndex(
        LONG index,
        LONG *row,
        LONG *column,
        LONG *rowExtents,
        LONG *columnExtents,
        boolean *isSelected) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_modelChange(
        IA2TableModelChange *modelChange) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IAccessibleTable, 0x35ad8070, 0xc20c, 0x4fb4, 0xb0,0x94, 0xf4,0xf7,0x27,0x5d,0xd4,0x69)
#endif
#else
typedef struct IAccessibleTableVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IAccessibleTable *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IAccessibleTable *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IAccessibleTable *This);

    /*** IAccessibleTable methods ***/
    HRESULT (STDMETHODCALLTYPE *get_accessibleAt)(
        IAccessibleTable *This,
        LONG row,
        LONG column,
        IUnknown **accessible);

    HRESULT (STDMETHODCALLTYPE *get_caption)(
        IAccessibleTable *This,
        IUnknown **accessible);

    HRESULT (STDMETHODCALLTYPE *get_childIndex)(
        IAccessibleTable *This,
        LONG rowIndex,
        LONG columnIndex,
        LONG *cellIndex);

    HRESULT (STDMETHODCALLTYPE *get_columnDescription)(
        IAccessibleTable *This,
        LONG column,
        BSTR *description);

    HRESULT (STDMETHODCALLTYPE *get_columnExtentAt)(
        IAccessibleTable *This,
        LONG row,
        LONG column,
        LONG *nColumnsSpanned);

    HRESULT (STDMETHODCALLTYPE *get_columnHeader)(
        IAccessibleTable *This,
        IAccessibleTable **accessibleTable,
        LONG *startingRowIndex);

    HRESULT (STDMETHODCALLTYPE *get_columnIndex)(
        IAccessibleTable *This,
        LONG cellIndex,
        LONG *columnIndex);

    HRESULT (STDMETHODCALLTYPE *get_nColumns)(
        IAccessibleTable *This,
        LONG *columnCount);

    HRESULT (STDMETHODCALLTYPE *get_nRows)(
        IAccessibleTable *This,
        LONG *rowCount);

    HRESULT (STDMETHODCALLTYPE *get_nSelectedChildren)(
        IAccessibleTable *This,
        LONG *cellCount);

    HRESULT (STDMETHODCALLTYPE *get_nSelectedColumns)(
        IAccessibleTable *This,
        LONG *columnCount);

    HRESULT (STDMETHODCALLTYPE *get_nSelectedRows)(
        IAccessibleTable *This,
        LONG *rowCount);

    HRESULT (STDMETHODCALLTYPE *get_rowDescription)(
        IAccessibleTable *This,
        LONG row,
        BSTR *description);

    HRESULT (STDMETHODCALLTYPE *get_rowExtentAt)(
        IAccessibleTable *This,
        LONG row,
        LONG column,
        LONG *nRowsSpanned);

    HRESULT (STDMETHODCALLTYPE *get_rowHeader)(
        IAccessibleTable *This,
        IAccessibleTable **accessibleTable,
        LONG *startingColumnIndex);

    HRESULT (STDMETHODCALLTYPE *get_rowIndex)(
        IAccessibleTable *This,
        LONG cellIndex,
        LONG *rowIndex);

    HRESULT (STDMETHODCALLTYPE *get_selectedChildren)(
        IAccessibleTable *This,
        LONG maxChildren,
        LONG **children,
        LONG *nChildren);

    HRESULT (STDMETHODCALLTYPE *get_selectedColumns)(
        IAccessibleTable *This,
        LONG maxColumns,
        LONG **columns,
        LONG *nColumns);

    HRESULT (STDMETHODCALLTYPE *get_selectedRows)(
        IAccessibleTable *This,
        LONG maxRows,
        LONG **rows,
        LONG *nRows);

    HRESULT (STDMETHODCALLTYPE *get_summary)(
        IAccessibleTable *This,
        IUnknown **accessible);

    HRESULT (STDMETHODCALLTYPE *get_isColumnSelected)(
        IAccessibleTable *This,
        LONG column,
        boolean *isSelected);

    HRESULT (STDMETHODCALLTYPE *get_isRowSelected)(
        IAccessibleTable *This,
        LONG row,
        boolean *isSelected);

    HRESULT (STDMETHODCALLTYPE *get_isSelected)(
        IAccessibleTable *This,
        LONG row,
        LONG column,
        boolean *isSelected);

    HRESULT (STDMETHODCALLTYPE *selectRow)(
        IAccessibleTable *This,
        LONG row);

    HRESULT (STDMETHODCALLTYPE *selectColumn)(
        IAccessibleTable *This,
        LONG column);

    HRESULT (STDMETHODCALLTYPE *unselectRow)(
        IAccessibleTable *This,
        LONG row);

    HRESULT (STDMETHODCALLTYPE *unselectColumn)(
        IAccessibleTable *This,
        LONG column);

    HRESULT (STDMETHODCALLTYPE *get_rowColumnExtentsAtIndex)(
        IAccessibleTable *This,
        LONG index,
        LONG *row,
        LONG *column,
        LONG *rowExtents,
        LONG *columnExtents,
        boolean *isSelected);

    HRESULT (STDMETHODCALLTYPE *get_modelChange)(
        IAccessibleTable *This,
        IA2TableModelChange *modelChange);

    END_INTERFACE
} IAccessibleTableVtbl;

interface IAccessibleTable {
    CONST_VTBL IAccessibleTableVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IAccessibleTable_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IAccessibleTable_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IAccessibleTable_Release(This) (This)->lpVtbl->Release(This)
/*** IAccessibleTable methods ***/
#define IAccessibleTable_get_accessibleAt(This,row,column,accessible) (This)->lpVtbl->get_accessibleAt(This,row,column,accessible)
#define IAccessibleTable_get_caption(This,accessible) (This)->lpVtbl->get_caption(This,accessible)
#define IAccessibleTable_get_childIndex(This,rowIndex,columnIndex,cellIndex) (This)->lpVtbl->get_childIndex(This,rowIndex,columnIndex,cellIndex)
#define IAccessibleTable_get_columnDescription(This,column,description) (This)->lpVtbl->get_columnDescription(This,column,description)
#define IAccessibleTable_get_columnExtentAt(This,row,column,nColumnsSpanned) (This)->lpVtbl->get_columnExtentAt(This,row,column,nColumnsSpanned)
#define IAccessibleTable_get_columnHeader(This,accessibleTable,startingRowIndex) (This)->lpVtbl->get_columnHeader(This,accessibleTable,startingRowIndex)
#define IAccessibleTable_get_columnIndex(This,cellIndex,columnIndex) (This)->lpVtbl->get_columnIndex(This,cellIndex,columnIndex)
#define IAccessibleTable_get_nColumns(This,columnCount) (This)->lpVtbl->get_nColumns(This,columnCount)
#define IAccessibleTable_get_nRows(This,rowCount) (This)->lpVtbl->get_nRows(This,rowCount)
#define IAccessibleTable_get_nSelectedChildren(This,cellCount) (This)->lpVtbl->get_nSelectedChildren(This,cellCount)
#define IAccessibleTable_get_nSelectedColumns(This,columnCount) (This)->lpVtbl->get_nSelectedColumns(This,columnCount)
#define IAccessibleTable_get_nSelectedRows(This,rowCount) (This)->lpVtbl->get_nSelectedRows(This,rowCount)
#define IAccessibleTable_get_rowDescription(This,row,description) (This)->lpVtbl->get_rowDescription(This,row,description)
#define IAccessibleTable_get_rowExtentAt(This,row,column,nRowsSpanned) (This)->lpVtbl->get_rowExtentAt(This,row,column,nRowsSpanned)
#define IAccessibleTable_get_rowHeader(This,accessibleTable,startingColumnIndex) (This)->lpVtbl->get_rowHeader(This,accessibleTable,startingColumnIndex)
#define IAccessibleTable_get_rowIndex(This,cellIndex,rowIndex) (This)->lpVtbl->get_rowIndex(This,cellIndex,rowIndex)
#define IAccessibleTable_get_selectedChildren(This,maxChildren,children,nChildren) (This)->lpVtbl->get_selectedChildren(This,maxChildren,children,nChildren)
#define IAccessibleTable_get_selectedColumns(This,maxColumns,columns,nColumns) (This)->lpVtbl->get_selectedColumns(This,maxColumns,columns,nColumns)
#define IAccessibleTable_get_selectedRows(This,maxRows,rows,nRows) (This)->lpVtbl->get_selectedRows(This,maxRows,rows,nRows)
#define IAccessibleTable_get_summary(This,accessible) (This)->lpVtbl->get_summary(This,accessible)
#define IAccessibleTable_get_isColumnSelected(This,column,isSelected) (This)->lpVtbl->get_isColumnSelected(This,column,isSelected)
#define IAccessibleTable_get_isRowSelected(This,row,isSelected) (This)->lpVtbl->get_isRowSelected(This,row,isSelected)
#define IAccessibleTable_get_isSelected(This,row,column,isSelected) (This)->lpVtbl->get_isSelected(This,row,column,isSelected)
#define IAccessibleTable_selectRow(This,row) (This)->lpVtbl->selectRow(This,row)
#define IAccessibleTable_selectColumn(This,column) (This)->lpVtbl->selectColumn(This,column)
#define IAccessibleTable_unselectRow(This,row) (This)->lpVtbl->unselectRow(This,row)
#define IAccessibleTable_unselectColumn(This,column) (This)->lpVtbl->unselectColumn(This,column)
#define IAccessibleTable_get_rowColumnExtentsAtIndex(This,index,row,column,rowExtents,columnExtents,isSelected) (This)->lpVtbl->get_rowColumnExtentsAtIndex(This,index,row,column,rowExtents,columnExtents,isSelected)
#define IAccessibleTable_get_modelChange(This,modelChange) (This)->lpVtbl->get_modelChange(This,modelChange)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IAccessibleTable_QueryInterface(IAccessibleTable* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IAccessibleTable_AddRef(IAccessibleTable* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IAccessibleTable_Release(IAccessibleTable* This) {
    return This->lpVtbl->Release(This);
}
/*** IAccessibleTable methods ***/
static FORCEINLINE HRESULT IAccessibleTable_get_accessibleAt(IAccessibleTable* This,LONG row,LONG column,IUnknown **accessible) {
    return This->lpVtbl->get_accessibleAt(This,row,column,accessible);
}
static FORCEINLINE HRESULT IAccessibleTable_get_caption(IAccessibleTable* This,IUnknown **accessible) {
    return This->lpVtbl->get_caption(This,accessible);
}
static FORCEINLINE HRESULT IAccessibleTable_get_childIndex(IAccessibleTable* This,LONG rowIndex,LONG columnIndex,LONG *cellIndex) {
    return This->lpVtbl->get_childIndex(This,rowIndex,columnIndex,cellIndex);
}
static FORCEINLINE HRESULT IAccessibleTable_get_columnDescription(IAccessibleTable* This,LONG column,BSTR *description) {
    return This->lpVtbl->get_columnDescription(This,column,description);
}
static FORCEINLINE HRESULT IAccessibleTable_get_columnExtentAt(IAccessibleTable* This,LONG row,LONG column,LONG *nColumnsSpanned) {
    return This->lpVtbl->get_columnExtentAt(This,row,column,nColumnsSpanned);
}
static FORCEINLINE HRESULT IAccessibleTable_get_columnHeader(IAccessibleTable* This,IAccessibleTable **accessibleTable,LONG *startingRowIndex) {
    return This->lpVtbl->get_columnHeader(This,accessibleTable,startingRowIndex);
}
static FORCEINLINE HRESULT IAccessibleTable_get_columnIndex(IAccessibleTable* This,LONG cellIndex,LONG *columnIndex) {
    return This->lpVtbl->get_columnIndex(This,cellIndex,columnIndex);
}
static FORCEINLINE HRESULT IAccessibleTable_get_nColumns(IAccessibleTable* This,LONG *columnCount) {
    return This->lpVtbl->get_nColumns(This,columnCount);
}
static FORCEINLINE HRESULT IAccessibleTable_get_nRows(IAccessibleTable* This,LONG *rowCount) {
    return This->lpVtbl->get_nRows(This,rowCount);
}
static FORCEINLINE HRESULT IAccessibleTable_get_nSelectedChildren(IAccessibleTable* This,LONG *cellCount) {
    return This->lpVtbl->get_nSelectedChildren(This,cellCount);
}
static FORCEINLINE HRESULT IAccessibleTable_get_nSelectedColumns(IAccessibleTable* This,LONG *columnCount) {
    return This->lpVtbl->get_nSelectedColumns(This,columnCount);
}
static FORCEINLINE HRESULT IAccessibleTable_get_nSelectedRows(IAccessibleTable* This,LONG *rowCount) {
    return This->lpVtbl->get_nSelectedRows(This,rowCount);
}
static FORCEINLINE HRESULT IAccessibleTable_get_rowDescription(IAccessibleTable* This,LONG row,BSTR *description) {
    return This->lpVtbl->get_rowDescription(This,row,description);
}
static FORCEINLINE HRESULT IAccessibleTable_get_rowExtentAt(IAccessibleTable* This,LONG row,LONG column,LONG *nRowsSpanned) {
    return This->lpVtbl->get_rowExtentAt(This,row,column,nRowsSpanned);
}
static FORCEINLINE HRESULT IAccessibleTable_get_rowHeader(IAccessibleTable* This,IAccessibleTable **accessibleTable,LONG *startingColumnIndex) {
    return This->lpVtbl->get_rowHeader(This,accessibleTable,startingColumnIndex);
}
static FORCEINLINE HRESULT IAccessibleTable_get_rowIndex(IAccessibleTable* This,LONG cellIndex,LONG *rowIndex) {
    return This->lpVtbl->get_rowIndex(This,cellIndex,rowIndex);
}
static FORCEINLINE HRESULT IAccessibleTable_get_selectedChildren(IAccessibleTable* This,LONG maxChildren,LONG **children,LONG *nChildren) {
    return This->lpVtbl->get_selectedChildren(This,maxChildren,children,nChildren);
}
static FORCEINLINE HRESULT IAccessibleTable_get_selectedColumns(IAccessibleTable* This,LONG maxColumns,LONG **columns,LONG *nColumns) {
    return This->lpVtbl->get_selectedColumns(This,maxColumns,columns,nColumns);
}
static FORCEINLINE HRESULT IAccessibleTable_get_selectedRows(IAccessibleTable* This,LONG maxRows,LONG **rows,LONG *nRows) {
    return This->lpVtbl->get_selectedRows(This,maxRows,rows,nRows);
}
static FORCEINLINE HRESULT IAccessibleTable_get_summary(IAccessibleTable* This,IUnknown **accessible) {
    return This->lpVtbl->get_summary(This,accessible);
}
static FORCEINLINE HRESULT IAccessibleTable_get_isColumnSelected(IAccessibleTable* This,LONG column,boolean *isSelected) {
    return This->lpVtbl->get_isColumnSelected(This,column,isSelected);
}
static FORCEINLINE HRESULT IAccessibleTable_get_isRowSelected(IAccessibleTable* This,LONG row,boolean *isSelected) {
    return This->lpVtbl->get_isRowSelected(This,row,isSelected);
}
static FORCEINLINE HRESULT IAccessibleTable_get_isSelected(IAccessibleTable* This,LONG row,LONG column,boolean *isSelected) {
    return This->lpVtbl->get_isSelected(This,row,column,isSelected);
}
static FORCEINLINE HRESULT IAccessibleTable_selectRow(IAccessibleTable* This,LONG row) {
    return This->lpVtbl->selectRow(This,row);
}
static FORCEINLINE HRESULT IAccessibleTable_selectColumn(IAccessibleTable* This,LONG column) {
    return This->lpVtbl->selectColumn(This,column);
}
static FORCEINLINE HRESULT IAccessibleTable_unselectRow(IAccessibleTable* This,LONG row) {
    return This->lpVtbl->unselectRow(This,row);
}
static FORCEINLINE HRESULT IAccessibleTable_unselectColumn(IAccessibleTable* This,LONG column) {
    return This->lpVtbl->unselectColumn(This,column);
}
static FORCEINLINE HRESULT IAccessibleTable_get_rowColumnExtentsAtIndex(IAccessibleTable* This,LONG index,LONG *row,LONG *column,LONG *rowExtents,LONG *columnExtents,boolean *isSelected) {
    return This->lpVtbl->get_rowColumnExtentsAtIndex(This,index,row,column,rowExtents,columnExtents,isSelected);
}
static FORCEINLINE HRESULT IAccessibleTable_get_modelChange(IAccessibleTable* This,IA2TableModelChange *modelChange) {
    return This->lpVtbl->get_modelChange(This,modelChange);
}
#endif
#endif

#endif


#endif  /* __IAccessibleTable_INTERFACE_DEFINED__ */

/* Begin additional prototypes for all interfaces */

ULONG           __RPC_USER BSTR_UserSize     (ULONG *, ULONG, BSTR *);
unsigned char * __RPC_USER BSTR_UserMarshal  (ULONG *, unsigned char *, BSTR *);
unsigned char * __RPC_USER BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void            __RPC_USER BSTR_UserFree     (ULONG *, BSTR *);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __accessibletable_h__ */
