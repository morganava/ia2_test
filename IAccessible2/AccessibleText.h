/*** Autogenerated by WIDL 3.20 from /home/pospeselr/Code/Tor/tor-browser/other-licenses/ia2/AccessibleText.idl - Do not edit ***/

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __accessibletext_h__
#define __accessibletext_h__

/* Forward declarations */

#ifndef __IAccessibleText_FWD_DEFINED__
#define __IAccessibleText_FWD_DEFINED__
typedef interface IAccessibleText IAccessibleText;
#ifdef __cplusplus
interface IAccessibleText;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <objidl.h>
#include <oaidl.h>
#include <oleacc.h>
#include <IA2CommonTypes.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef struct IA2TextSegment {
    BSTR text;
    LONG start;
    LONG end;
} IA2TextSegment;
enum IA2TextBoundaryType {
    IA2_TEXT_BOUNDARY_CHAR = 0,
    IA2_TEXT_BOUNDARY_WORD = 1,
    IA2_TEXT_BOUNDARY_SENTENCE = 2,
    IA2_TEXT_BOUNDARY_PARAGRAPH = 3,
    IA2_TEXT_BOUNDARY_LINE = 4,
    IA2_TEXT_BOUNDARY_ALL = 5
};
/*****************************************************************************
 * IAccessibleText interface
 */
#ifndef __IAccessibleText_INTERFACE_DEFINED__
#define __IAccessibleText_INTERFACE_DEFINED__

DEFINE_GUID(IID_IAccessibleText, 0x24fd2ffb, 0x3aad, 0x4a08, 0x83,0x35, 0xa3,0xad,0x89,0xc0,0xfb,0x4b);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("24fd2ffb-3aad-4a08-8335-a3ad89c0fb4b")
IAccessibleText : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE addSelection(
        LONG startOffset,
        LONG endOffset) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_attributes(
        LONG offset,
        LONG *startOffset,
        LONG *endOffset,
        BSTR *textAttributes) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_caretOffset(
        LONG *offset) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_characterExtents(
        LONG offset,
        enum IA2CoordinateType coordType,
        LONG *x,
        LONG *y,
        LONG *width,
        LONG *height) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_nSelections(
        LONG *nSelections) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_offsetAtPoint(
        LONG x,
        LONG y,
        enum IA2CoordinateType coordType,
        LONG *offset) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_selection(
        LONG selectionIndex,
        LONG *startOffset,
        LONG *endOffset) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_text(
        LONG startOffset,
        LONG endOffset,
        BSTR *text) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_textBeforeOffset(
        LONG offset,
        enum IA2TextBoundaryType boundaryType,
        LONG *startOffset,
        LONG *endOffset,
        BSTR *text) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_textAfterOffset(
        LONG offset,
        enum IA2TextBoundaryType boundaryType,
        LONG *startOffset,
        LONG *endOffset,
        BSTR *text) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_textAtOffset(
        LONG offset,
        enum IA2TextBoundaryType boundaryType,
        LONG *startOffset,
        LONG *endOffset,
        BSTR *text) = 0;

    virtual HRESULT STDMETHODCALLTYPE removeSelection(
        LONG selectionIndex) = 0;

    virtual HRESULT STDMETHODCALLTYPE setCaretOffset(
        LONG offset) = 0;

    virtual HRESULT STDMETHODCALLTYPE setSelection(
        LONG selectionIndex,
        LONG startOffset,
        LONG endOffset) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_nCharacters(
        LONG *nCharacters) = 0;

    virtual HRESULT STDMETHODCALLTYPE scrollSubstringTo(
        LONG startIndex,
        LONG endIndex,
        enum IA2ScrollType scrollType) = 0;

    virtual HRESULT STDMETHODCALLTYPE scrollSubstringToPoint(
        LONG startIndex,
        LONG endIndex,
        enum IA2CoordinateType coordinateType,
        LONG x,
        LONG y) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_newText(
        IA2TextSegment *newText) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_oldText(
        IA2TextSegment *oldText) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IAccessibleText, 0x24fd2ffb, 0x3aad, 0x4a08, 0x83,0x35, 0xa3,0xad,0x89,0xc0,0xfb,0x4b)
#endif
#else
typedef struct IAccessibleTextVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IAccessibleText *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IAccessibleText *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IAccessibleText *This);

    /*** IAccessibleText methods ***/
    HRESULT (STDMETHODCALLTYPE *addSelection)(
        IAccessibleText *This,
        LONG startOffset,
        LONG endOffset);

    HRESULT (STDMETHODCALLTYPE *get_attributes)(
        IAccessibleText *This,
        LONG offset,
        LONG *startOffset,
        LONG *endOffset,
        BSTR *textAttributes);

    HRESULT (STDMETHODCALLTYPE *get_caretOffset)(
        IAccessibleText *This,
        LONG *offset);

    HRESULT (STDMETHODCALLTYPE *get_characterExtents)(
        IAccessibleText *This,
        LONG offset,
        enum IA2CoordinateType coordType,
        LONG *x,
        LONG *y,
        LONG *width,
        LONG *height);

    HRESULT (STDMETHODCALLTYPE *get_nSelections)(
        IAccessibleText *This,
        LONG *nSelections);

    HRESULT (STDMETHODCALLTYPE *get_offsetAtPoint)(
        IAccessibleText *This,
        LONG x,
        LONG y,
        enum IA2CoordinateType coordType,
        LONG *offset);

    HRESULT (STDMETHODCALLTYPE *get_selection)(
        IAccessibleText *This,
        LONG selectionIndex,
        LONG *startOffset,
        LONG *endOffset);

    HRESULT (STDMETHODCALLTYPE *get_text)(
        IAccessibleText *This,
        LONG startOffset,
        LONG endOffset,
        BSTR *text);

    HRESULT (STDMETHODCALLTYPE *get_textBeforeOffset)(
        IAccessibleText *This,
        LONG offset,
        enum IA2TextBoundaryType boundaryType,
        LONG *startOffset,
        LONG *endOffset,
        BSTR *text);

    HRESULT (STDMETHODCALLTYPE *get_textAfterOffset)(
        IAccessibleText *This,
        LONG offset,
        enum IA2TextBoundaryType boundaryType,
        LONG *startOffset,
        LONG *endOffset,
        BSTR *text);

    HRESULT (STDMETHODCALLTYPE *get_textAtOffset)(
        IAccessibleText *This,
        LONG offset,
        enum IA2TextBoundaryType boundaryType,
        LONG *startOffset,
        LONG *endOffset,
        BSTR *text);

    HRESULT (STDMETHODCALLTYPE *removeSelection)(
        IAccessibleText *This,
        LONG selectionIndex);

    HRESULT (STDMETHODCALLTYPE *setCaretOffset)(
        IAccessibleText *This,
        LONG offset);

    HRESULT (STDMETHODCALLTYPE *setSelection)(
        IAccessibleText *This,
        LONG selectionIndex,
        LONG startOffset,
        LONG endOffset);

    HRESULT (STDMETHODCALLTYPE *get_nCharacters)(
        IAccessibleText *This,
        LONG *nCharacters);

    HRESULT (STDMETHODCALLTYPE *scrollSubstringTo)(
        IAccessibleText *This,
        LONG startIndex,
        LONG endIndex,
        enum IA2ScrollType scrollType);

    HRESULT (STDMETHODCALLTYPE *scrollSubstringToPoint)(
        IAccessibleText *This,
        LONG startIndex,
        LONG endIndex,
        enum IA2CoordinateType coordinateType,
        LONG x,
        LONG y);

    HRESULT (STDMETHODCALLTYPE *get_newText)(
        IAccessibleText *This,
        IA2TextSegment *newText);

    HRESULT (STDMETHODCALLTYPE *get_oldText)(
        IAccessibleText *This,
        IA2TextSegment *oldText);

    END_INTERFACE
} IAccessibleTextVtbl;

interface IAccessibleText {
    CONST_VTBL IAccessibleTextVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IAccessibleText_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IAccessibleText_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IAccessibleText_Release(This) (This)->lpVtbl->Release(This)
/*** IAccessibleText methods ***/
#define IAccessibleText_addSelection(This,startOffset,endOffset) (This)->lpVtbl->addSelection(This,startOffset,endOffset)
#define IAccessibleText_get_attributes(This,offset,startOffset,endOffset,textAttributes) (This)->lpVtbl->get_attributes(This,offset,startOffset,endOffset,textAttributes)
#define IAccessibleText_get_caretOffset(This,offset) (This)->lpVtbl->get_caretOffset(This,offset)
#define IAccessibleText_get_characterExtents(This,offset,coordType,x,y,width,height) (This)->lpVtbl->get_characterExtents(This,offset,coordType,x,y,width,height)
#define IAccessibleText_get_nSelections(This,nSelections) (This)->lpVtbl->get_nSelections(This,nSelections)
#define IAccessibleText_get_offsetAtPoint(This,x,y,coordType,offset) (This)->lpVtbl->get_offsetAtPoint(This,x,y,coordType,offset)
#define IAccessibleText_get_selection(This,selectionIndex,startOffset,endOffset) (This)->lpVtbl->get_selection(This,selectionIndex,startOffset,endOffset)
#define IAccessibleText_get_text(This,startOffset,endOffset,text) (This)->lpVtbl->get_text(This,startOffset,endOffset,text)
#define IAccessibleText_get_textBeforeOffset(This,offset,boundaryType,startOffset,endOffset,text) (This)->lpVtbl->get_textBeforeOffset(This,offset,boundaryType,startOffset,endOffset,text)
#define IAccessibleText_get_textAfterOffset(This,offset,boundaryType,startOffset,endOffset,text) (This)->lpVtbl->get_textAfterOffset(This,offset,boundaryType,startOffset,endOffset,text)
#define IAccessibleText_get_textAtOffset(This,offset,boundaryType,startOffset,endOffset,text) (This)->lpVtbl->get_textAtOffset(This,offset,boundaryType,startOffset,endOffset,text)
#define IAccessibleText_removeSelection(This,selectionIndex) (This)->lpVtbl->removeSelection(This,selectionIndex)
#define IAccessibleText_setCaretOffset(This,offset) (This)->lpVtbl->setCaretOffset(This,offset)
#define IAccessibleText_setSelection(This,selectionIndex,startOffset,endOffset) (This)->lpVtbl->setSelection(This,selectionIndex,startOffset,endOffset)
#define IAccessibleText_get_nCharacters(This,nCharacters) (This)->lpVtbl->get_nCharacters(This,nCharacters)
#define IAccessibleText_scrollSubstringTo(This,startIndex,endIndex,scrollType) (This)->lpVtbl->scrollSubstringTo(This,startIndex,endIndex,scrollType)
#define IAccessibleText_scrollSubstringToPoint(This,startIndex,endIndex,coordinateType,x,y) (This)->lpVtbl->scrollSubstringToPoint(This,startIndex,endIndex,coordinateType,x,y)
#define IAccessibleText_get_newText(This,newText) (This)->lpVtbl->get_newText(This,newText)
#define IAccessibleText_get_oldText(This,oldText) (This)->lpVtbl->get_oldText(This,oldText)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IAccessibleText_QueryInterface(IAccessibleText* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IAccessibleText_AddRef(IAccessibleText* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IAccessibleText_Release(IAccessibleText* This) {
    return This->lpVtbl->Release(This);
}
/*** IAccessibleText methods ***/
static FORCEINLINE HRESULT IAccessibleText_addSelection(IAccessibleText* This,LONG startOffset,LONG endOffset) {
    return This->lpVtbl->addSelection(This,startOffset,endOffset);
}
static FORCEINLINE HRESULT IAccessibleText_get_attributes(IAccessibleText* This,LONG offset,LONG *startOffset,LONG *endOffset,BSTR *textAttributes) {
    return This->lpVtbl->get_attributes(This,offset,startOffset,endOffset,textAttributes);
}
static FORCEINLINE HRESULT IAccessibleText_get_caretOffset(IAccessibleText* This,LONG *offset) {
    return This->lpVtbl->get_caretOffset(This,offset);
}
static FORCEINLINE HRESULT IAccessibleText_get_characterExtents(IAccessibleText* This,LONG offset,enum IA2CoordinateType coordType,LONG *x,LONG *y,LONG *width,LONG *height) {
    return This->lpVtbl->get_characterExtents(This,offset,coordType,x,y,width,height);
}
static FORCEINLINE HRESULT IAccessibleText_get_nSelections(IAccessibleText* This,LONG *nSelections) {
    return This->lpVtbl->get_nSelections(This,nSelections);
}
static FORCEINLINE HRESULT IAccessibleText_get_offsetAtPoint(IAccessibleText* This,LONG x,LONG y,enum IA2CoordinateType coordType,LONG *offset) {
    return This->lpVtbl->get_offsetAtPoint(This,x,y,coordType,offset);
}
static FORCEINLINE HRESULT IAccessibleText_get_selection(IAccessibleText* This,LONG selectionIndex,LONG *startOffset,LONG *endOffset) {
    return This->lpVtbl->get_selection(This,selectionIndex,startOffset,endOffset);
}
static FORCEINLINE HRESULT IAccessibleText_get_text(IAccessibleText* This,LONG startOffset,LONG endOffset,BSTR *text) {
    return This->lpVtbl->get_text(This,startOffset,endOffset,text);
}
static FORCEINLINE HRESULT IAccessibleText_get_textBeforeOffset(IAccessibleText* This,LONG offset,enum IA2TextBoundaryType boundaryType,LONG *startOffset,LONG *endOffset,BSTR *text) {
    return This->lpVtbl->get_textBeforeOffset(This,offset,boundaryType,startOffset,endOffset,text);
}
static FORCEINLINE HRESULT IAccessibleText_get_textAfterOffset(IAccessibleText* This,LONG offset,enum IA2TextBoundaryType boundaryType,LONG *startOffset,LONG *endOffset,BSTR *text) {
    return This->lpVtbl->get_textAfterOffset(This,offset,boundaryType,startOffset,endOffset,text);
}
static FORCEINLINE HRESULT IAccessibleText_get_textAtOffset(IAccessibleText* This,LONG offset,enum IA2TextBoundaryType boundaryType,LONG *startOffset,LONG *endOffset,BSTR *text) {
    return This->lpVtbl->get_textAtOffset(This,offset,boundaryType,startOffset,endOffset,text);
}
static FORCEINLINE HRESULT IAccessibleText_removeSelection(IAccessibleText* This,LONG selectionIndex) {
    return This->lpVtbl->removeSelection(This,selectionIndex);
}
static FORCEINLINE HRESULT IAccessibleText_setCaretOffset(IAccessibleText* This,LONG offset) {
    return This->lpVtbl->setCaretOffset(This,offset);
}
static FORCEINLINE HRESULT IAccessibleText_setSelection(IAccessibleText* This,LONG selectionIndex,LONG startOffset,LONG endOffset) {
    return This->lpVtbl->setSelection(This,selectionIndex,startOffset,endOffset);
}
static FORCEINLINE HRESULT IAccessibleText_get_nCharacters(IAccessibleText* This,LONG *nCharacters) {
    return This->lpVtbl->get_nCharacters(This,nCharacters);
}
static FORCEINLINE HRESULT IAccessibleText_scrollSubstringTo(IAccessibleText* This,LONG startIndex,LONG endIndex,enum IA2ScrollType scrollType) {
    return This->lpVtbl->scrollSubstringTo(This,startIndex,endIndex,scrollType);
}
static FORCEINLINE HRESULT IAccessibleText_scrollSubstringToPoint(IAccessibleText* This,LONG startIndex,LONG endIndex,enum IA2CoordinateType coordinateType,LONG x,LONG y) {
    return This->lpVtbl->scrollSubstringToPoint(This,startIndex,endIndex,coordinateType,x,y);
}
static FORCEINLINE HRESULT IAccessibleText_get_newText(IAccessibleText* This,IA2TextSegment *newText) {
    return This->lpVtbl->get_newText(This,newText);
}
static FORCEINLINE HRESULT IAccessibleText_get_oldText(IAccessibleText* This,IA2TextSegment *oldText) {
    return This->lpVtbl->get_oldText(This,oldText);
}
#endif
#endif

#endif


#endif  /* __IAccessibleText_INTERFACE_DEFINED__ */

/* Begin additional prototypes for all interfaces */

ULONG           __RPC_USER BSTR_UserSize     (ULONG *, ULONG, BSTR *);
unsigned char * __RPC_USER BSTR_UserMarshal  (ULONG *, unsigned char *, BSTR *);
unsigned char * __RPC_USER BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void            __RPC_USER BSTR_UserFree     (ULONG *, BSTR *);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __accessibletext_h__ */
