/*** Autogenerated by WIDL 3.20 from /home/pospeselr/Code/Tor/tor-browser/other-licenses/ia2/AccessibleRelation.idl - Do not edit ***/

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __accessiblerelation_h__
#define __accessiblerelation_h__

/* Forward declarations */

#ifndef __IAccessibleRelation_FWD_DEFINED__
#define __IAccessibleRelation_FWD_DEFINED__
typedef interface IAccessibleRelation IAccessibleRelation;
#ifdef __cplusplus
interface IAccessibleRelation;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <objidl.h>
#include <oaidl.h>
#include <oleacc.h>

#ifdef __cplusplus
extern "C" {
#endif

#define IA2_RELATION_CONTAINING_APPLICATION (L"containingApplication")

#define IA2_RELATION_CONTAINING_DOCUMENT (L"containingDocument")

#define IA2_RELATION_CONTAINING_TAB_PANE (L"containingTabPane")

#define IA2_RELATION_CONTAINING_WINDOW (L"containingWindow")

#define IA2_RELATION_CONTROLLED_BY (L"controlledBy")

#define IA2_RELATION_CONTROLLER_FOR (L"controllerFor")

#define IA2_RELATION_DESCRIBED_BY (L"describedBy")

#define IA2_RELATION_DESCRIPTION_FOR (L"descriptionFor")

#define IA2_RELATION_EMBEDDED_BY (L"embeddedBy")

#define IA2_RELATION_EMBEDS (L"embeds")

#define IA2_RELATION_FLOWS_FROM (L"flowsFrom")

#define IA2_RELATION_FLOWS_TO (L"flowsTo")

#define IA2_RELATION_LABEL_FOR (L"labelFor")

#define IA2_RELATION_LABELED_BY (L"labelledBy")

#define IA2_RELATION_LABELLED_BY (L"labelledBy")

#define IA2_RELATION_MEMBER_OF (L"memberOf")

#define IA2_RELATION_NEXT_TABBABLE (L"nextTabbable")

#define IA2_RELATION_NODE_CHILD_OF (L"nodeChildOf")

#define IA2_RELATION_NODE_PARENT_OF (L"nodeParentOf")

#define IA2_RELATION_PARENT_WINDOW_OF (L"parentWindowOf")

#define IA2_RELATION_POPUP_FOR (L"popupFor")

#define IA2_RELATION_PREVIOUS_TABBABLE (L"previousTabbable")

#define IA2_RELATION_SUBWINDOW_OF (L"subwindowOf")

#define IA2_RELATION_DETAILS (L"details")

#define IA2_RELATION_DETAILS_FOR (L"detailsFor")

#define IA2_RELATION_ERROR (L"error")

#define IA2_RELATION_ERROR_FOR (L"errorFor")

/*****************************************************************************
 * IAccessibleRelation interface
 */
#ifndef __IAccessibleRelation_INTERFACE_DEFINED__
#define __IAccessibleRelation_INTERFACE_DEFINED__

DEFINE_GUID(IID_IAccessibleRelation, 0x7cdf86ee, 0xc3da, 0x496a, 0xbd,0xa4, 0x28,0x1b,0x33,0x6e,0x1f,0xdc);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("7cdf86ee-c3da-496a-bda4-281b336e1fdc")
IAccessibleRelation : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE get_relationType(
        BSTR *relationType) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_localizedRelationType(
        BSTR *localizedRelationType) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_nTargets(
        LONG *nTargets) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_target(
        LONG targetIndex,
        IUnknown **target) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_targets(
        LONG maxTargets,
        IUnknown **targets,
        LONG *nTargets) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IAccessibleRelation, 0x7cdf86ee, 0xc3da, 0x496a, 0xbd,0xa4, 0x28,0x1b,0x33,0x6e,0x1f,0xdc)
#endif
#else
typedef struct IAccessibleRelationVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IAccessibleRelation *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IAccessibleRelation *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IAccessibleRelation *This);

    /*** IAccessibleRelation methods ***/
    HRESULT (STDMETHODCALLTYPE *get_relationType)(
        IAccessibleRelation *This,
        BSTR *relationType);

    HRESULT (STDMETHODCALLTYPE *get_localizedRelationType)(
        IAccessibleRelation *This,
        BSTR *localizedRelationType);

    HRESULT (STDMETHODCALLTYPE *get_nTargets)(
        IAccessibleRelation *This,
        LONG *nTargets);

    HRESULT (STDMETHODCALLTYPE *get_target)(
        IAccessibleRelation *This,
        LONG targetIndex,
        IUnknown **target);

    HRESULT (STDMETHODCALLTYPE *get_targets)(
        IAccessibleRelation *This,
        LONG maxTargets,
        IUnknown **targets,
        LONG *nTargets);

    END_INTERFACE
} IAccessibleRelationVtbl;

interface IAccessibleRelation {
    CONST_VTBL IAccessibleRelationVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IAccessibleRelation_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IAccessibleRelation_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IAccessibleRelation_Release(This) (This)->lpVtbl->Release(This)
/*** IAccessibleRelation methods ***/
#define IAccessibleRelation_get_relationType(This,relationType) (This)->lpVtbl->get_relationType(This,relationType)
#define IAccessibleRelation_get_localizedRelationType(This,localizedRelationType) (This)->lpVtbl->get_localizedRelationType(This,localizedRelationType)
#define IAccessibleRelation_get_nTargets(This,nTargets) (This)->lpVtbl->get_nTargets(This,nTargets)
#define IAccessibleRelation_get_target(This,targetIndex,target) (This)->lpVtbl->get_target(This,targetIndex,target)
#define IAccessibleRelation_get_targets(This,maxTargets,targets,nTargets) (This)->lpVtbl->get_targets(This,maxTargets,targets,nTargets)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IAccessibleRelation_QueryInterface(IAccessibleRelation* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IAccessibleRelation_AddRef(IAccessibleRelation* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IAccessibleRelation_Release(IAccessibleRelation* This) {
    return This->lpVtbl->Release(This);
}
/*** IAccessibleRelation methods ***/
static FORCEINLINE HRESULT IAccessibleRelation_get_relationType(IAccessibleRelation* This,BSTR *relationType) {
    return This->lpVtbl->get_relationType(This,relationType);
}
static FORCEINLINE HRESULT IAccessibleRelation_get_localizedRelationType(IAccessibleRelation* This,BSTR *localizedRelationType) {
    return This->lpVtbl->get_localizedRelationType(This,localizedRelationType);
}
static FORCEINLINE HRESULT IAccessibleRelation_get_nTargets(IAccessibleRelation* This,LONG *nTargets) {
    return This->lpVtbl->get_nTargets(This,nTargets);
}
static FORCEINLINE HRESULT IAccessibleRelation_get_target(IAccessibleRelation* This,LONG targetIndex,IUnknown **target) {
    return This->lpVtbl->get_target(This,targetIndex,target);
}
static FORCEINLINE HRESULT IAccessibleRelation_get_targets(IAccessibleRelation* This,LONG maxTargets,IUnknown **targets,LONG *nTargets) {
    return This->lpVtbl->get_targets(This,maxTargets,targets,nTargets);
}
#endif
#endif

#endif


#endif  /* __IAccessibleRelation_INTERFACE_DEFINED__ */

/* Begin additional prototypes for all interfaces */

ULONG           __RPC_USER BSTR_UserSize     (ULONG *, ULONG, BSTR *);
unsigned char * __RPC_USER BSTR_UserMarshal  (ULONG *, unsigned char *, BSTR *);
unsigned char * __RPC_USER BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void            __RPC_USER BSTR_UserFree     (ULONG *, BSTR *);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __accessiblerelation_h__ */
