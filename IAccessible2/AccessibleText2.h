/*** Autogenerated by WIDL 3.20 from /home/pospeselr/Code/Tor/tor-browser/other-licenses/ia2/AccessibleText2.idl - Do not edit ***/

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __accessibletext2_h__
#define __accessibletext2_h__

/* Forward declarations */

#ifndef __IAccessibleText2_FWD_DEFINED__
#define __IAccessibleText2_FWD_DEFINED__
typedef interface IAccessibleText2 IAccessibleText2;
#ifdef __cplusplus
interface IAccessibleText2;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <objidl.h>
#include <oaidl.h>
#include <oleacc.h>
#include <IA2CommonTypes.h>
#include <AccessibleText.h>

#ifdef __cplusplus
extern "C" {
#endif

/*****************************************************************************
 * IAccessibleText2 interface
 */
#ifndef __IAccessibleText2_INTERFACE_DEFINED__
#define __IAccessibleText2_INTERFACE_DEFINED__

DEFINE_GUID(IID_IAccessibleText2, 0x9690a9cc, 0x5c80, 0x4df5, 0x85,0x2e, 0x2d,0x5a,0xe4,0x18,0x9a,0x54);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("9690a9cc-5c80-4df5-852e-2d5ae4189a54")
IAccessibleText2 : public IAccessibleText
{
    virtual HRESULT STDMETHODCALLTYPE get_attributeRange(
        LONG offset,
        BSTR filter,
        LONG *startOffset,
        LONG *endOffset,
        BSTR *attributeValues) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IAccessibleText2, 0x9690a9cc, 0x5c80, 0x4df5, 0x85,0x2e, 0x2d,0x5a,0xe4,0x18,0x9a,0x54)
#endif
#else
typedef struct IAccessibleText2Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IAccessibleText2 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IAccessibleText2 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IAccessibleText2 *This);

    /*** IAccessibleText methods ***/
    HRESULT (STDMETHODCALLTYPE *addSelection)(
        IAccessibleText2 *This,
        LONG startOffset,
        LONG endOffset);

    HRESULT (STDMETHODCALLTYPE *get_attributes)(
        IAccessibleText2 *This,
        LONG offset,
        LONG *startOffset,
        LONG *endOffset,
        BSTR *textAttributes);

    HRESULT (STDMETHODCALLTYPE *get_caretOffset)(
        IAccessibleText2 *This,
        LONG *offset);

    HRESULT (STDMETHODCALLTYPE *get_characterExtents)(
        IAccessibleText2 *This,
        LONG offset,
        enum IA2CoordinateType coordType,
        LONG *x,
        LONG *y,
        LONG *width,
        LONG *height);

    HRESULT (STDMETHODCALLTYPE *get_nSelections)(
        IAccessibleText2 *This,
        LONG *nSelections);

    HRESULT (STDMETHODCALLTYPE *get_offsetAtPoint)(
        IAccessibleText2 *This,
        LONG x,
        LONG y,
        enum IA2CoordinateType coordType,
        LONG *offset);

    HRESULT (STDMETHODCALLTYPE *get_selection)(
        IAccessibleText2 *This,
        LONG selectionIndex,
        LONG *startOffset,
        LONG *endOffset);

    HRESULT (STDMETHODCALLTYPE *get_text)(
        IAccessibleText2 *This,
        LONG startOffset,
        LONG endOffset,
        BSTR *text);

    HRESULT (STDMETHODCALLTYPE *get_textBeforeOffset)(
        IAccessibleText2 *This,
        LONG offset,
        enum IA2TextBoundaryType boundaryType,
        LONG *startOffset,
        LONG *endOffset,
        BSTR *text);

    HRESULT (STDMETHODCALLTYPE *get_textAfterOffset)(
        IAccessibleText2 *This,
        LONG offset,
        enum IA2TextBoundaryType boundaryType,
        LONG *startOffset,
        LONG *endOffset,
        BSTR *text);

    HRESULT (STDMETHODCALLTYPE *get_textAtOffset)(
        IAccessibleText2 *This,
        LONG offset,
        enum IA2TextBoundaryType boundaryType,
        LONG *startOffset,
        LONG *endOffset,
        BSTR *text);

    HRESULT (STDMETHODCALLTYPE *removeSelection)(
        IAccessibleText2 *This,
        LONG selectionIndex);

    HRESULT (STDMETHODCALLTYPE *setCaretOffset)(
        IAccessibleText2 *This,
        LONG offset);

    HRESULT (STDMETHODCALLTYPE *setSelection)(
        IAccessibleText2 *This,
        LONG selectionIndex,
        LONG startOffset,
        LONG endOffset);

    HRESULT (STDMETHODCALLTYPE *get_nCharacters)(
        IAccessibleText2 *This,
        LONG *nCharacters);

    HRESULT (STDMETHODCALLTYPE *scrollSubstringTo)(
        IAccessibleText2 *This,
        LONG startIndex,
        LONG endIndex,
        enum IA2ScrollType scrollType);

    HRESULT (STDMETHODCALLTYPE *scrollSubstringToPoint)(
        IAccessibleText2 *This,
        LONG startIndex,
        LONG endIndex,
        enum IA2CoordinateType coordinateType,
        LONG x,
        LONG y);

    HRESULT (STDMETHODCALLTYPE *get_newText)(
        IAccessibleText2 *This,
        IA2TextSegment *newText);

    HRESULT (STDMETHODCALLTYPE *get_oldText)(
        IAccessibleText2 *This,
        IA2TextSegment *oldText);

    /*** IAccessibleText2 methods ***/
    HRESULT (STDMETHODCALLTYPE *get_attributeRange)(
        IAccessibleText2 *This,
        LONG offset,
        BSTR filter,
        LONG *startOffset,
        LONG *endOffset,
        BSTR *attributeValues);

    END_INTERFACE
} IAccessibleText2Vtbl;

interface IAccessibleText2 {
    CONST_VTBL IAccessibleText2Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IAccessibleText2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IAccessibleText2_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IAccessibleText2_Release(This) (This)->lpVtbl->Release(This)
/*** IAccessibleText methods ***/
#define IAccessibleText2_addSelection(This,startOffset,endOffset) (This)->lpVtbl->addSelection(This,startOffset,endOffset)
#define IAccessibleText2_get_attributes(This,offset,startOffset,endOffset,textAttributes) (This)->lpVtbl->get_attributes(This,offset,startOffset,endOffset,textAttributes)
#define IAccessibleText2_get_caretOffset(This,offset) (This)->lpVtbl->get_caretOffset(This,offset)
#define IAccessibleText2_get_characterExtents(This,offset,coordType,x,y,width,height) (This)->lpVtbl->get_characterExtents(This,offset,coordType,x,y,width,height)
#define IAccessibleText2_get_nSelections(This,nSelections) (This)->lpVtbl->get_nSelections(This,nSelections)
#define IAccessibleText2_get_offsetAtPoint(This,x,y,coordType,offset) (This)->lpVtbl->get_offsetAtPoint(This,x,y,coordType,offset)
#define IAccessibleText2_get_selection(This,selectionIndex,startOffset,endOffset) (This)->lpVtbl->get_selection(This,selectionIndex,startOffset,endOffset)
#define IAccessibleText2_get_text(This,startOffset,endOffset,text) (This)->lpVtbl->get_text(This,startOffset,endOffset,text)
#define IAccessibleText2_get_textBeforeOffset(This,offset,boundaryType,startOffset,endOffset,text) (This)->lpVtbl->get_textBeforeOffset(This,offset,boundaryType,startOffset,endOffset,text)
#define IAccessibleText2_get_textAfterOffset(This,offset,boundaryType,startOffset,endOffset,text) (This)->lpVtbl->get_textAfterOffset(This,offset,boundaryType,startOffset,endOffset,text)
#define IAccessibleText2_get_textAtOffset(This,offset,boundaryType,startOffset,endOffset,text) (This)->lpVtbl->get_textAtOffset(This,offset,boundaryType,startOffset,endOffset,text)
#define IAccessibleText2_removeSelection(This,selectionIndex) (This)->lpVtbl->removeSelection(This,selectionIndex)
#define IAccessibleText2_setCaretOffset(This,offset) (This)->lpVtbl->setCaretOffset(This,offset)
#define IAccessibleText2_setSelection(This,selectionIndex,startOffset,endOffset) (This)->lpVtbl->setSelection(This,selectionIndex,startOffset,endOffset)
#define IAccessibleText2_get_nCharacters(This,nCharacters) (This)->lpVtbl->get_nCharacters(This,nCharacters)
#define IAccessibleText2_scrollSubstringTo(This,startIndex,endIndex,scrollType) (This)->lpVtbl->scrollSubstringTo(This,startIndex,endIndex,scrollType)
#define IAccessibleText2_scrollSubstringToPoint(This,startIndex,endIndex,coordinateType,x,y) (This)->lpVtbl->scrollSubstringToPoint(This,startIndex,endIndex,coordinateType,x,y)
#define IAccessibleText2_get_newText(This,newText) (This)->lpVtbl->get_newText(This,newText)
#define IAccessibleText2_get_oldText(This,oldText) (This)->lpVtbl->get_oldText(This,oldText)
/*** IAccessibleText2 methods ***/
#define IAccessibleText2_get_attributeRange(This,offset,filter,startOffset,endOffset,attributeValues) (This)->lpVtbl->get_attributeRange(This,offset,filter,startOffset,endOffset,attributeValues)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IAccessibleText2_QueryInterface(IAccessibleText2* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IAccessibleText2_AddRef(IAccessibleText2* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IAccessibleText2_Release(IAccessibleText2* This) {
    return This->lpVtbl->Release(This);
}
/*** IAccessibleText methods ***/
static FORCEINLINE HRESULT IAccessibleText2_addSelection(IAccessibleText2* This,LONG startOffset,LONG endOffset) {
    return This->lpVtbl->addSelection(This,startOffset,endOffset);
}
static FORCEINLINE HRESULT IAccessibleText2_get_attributes(IAccessibleText2* This,LONG offset,LONG *startOffset,LONG *endOffset,BSTR *textAttributes) {
    return This->lpVtbl->get_attributes(This,offset,startOffset,endOffset,textAttributes);
}
static FORCEINLINE HRESULT IAccessibleText2_get_caretOffset(IAccessibleText2* This,LONG *offset) {
    return This->lpVtbl->get_caretOffset(This,offset);
}
static FORCEINLINE HRESULT IAccessibleText2_get_characterExtents(IAccessibleText2* This,LONG offset,enum IA2CoordinateType coordType,LONG *x,LONG *y,LONG *width,LONG *height) {
    return This->lpVtbl->get_characterExtents(This,offset,coordType,x,y,width,height);
}
static FORCEINLINE HRESULT IAccessibleText2_get_nSelections(IAccessibleText2* This,LONG *nSelections) {
    return This->lpVtbl->get_nSelections(This,nSelections);
}
static FORCEINLINE HRESULT IAccessibleText2_get_offsetAtPoint(IAccessibleText2* This,LONG x,LONG y,enum IA2CoordinateType coordType,LONG *offset) {
    return This->lpVtbl->get_offsetAtPoint(This,x,y,coordType,offset);
}
static FORCEINLINE HRESULT IAccessibleText2_get_selection(IAccessibleText2* This,LONG selectionIndex,LONG *startOffset,LONG *endOffset) {
    return This->lpVtbl->get_selection(This,selectionIndex,startOffset,endOffset);
}
static FORCEINLINE HRESULT IAccessibleText2_get_text(IAccessibleText2* This,LONG startOffset,LONG endOffset,BSTR *text) {
    return This->lpVtbl->get_text(This,startOffset,endOffset,text);
}
static FORCEINLINE HRESULT IAccessibleText2_get_textBeforeOffset(IAccessibleText2* This,LONG offset,enum IA2TextBoundaryType boundaryType,LONG *startOffset,LONG *endOffset,BSTR *text) {
    return This->lpVtbl->get_textBeforeOffset(This,offset,boundaryType,startOffset,endOffset,text);
}
static FORCEINLINE HRESULT IAccessibleText2_get_textAfterOffset(IAccessibleText2* This,LONG offset,enum IA2TextBoundaryType boundaryType,LONG *startOffset,LONG *endOffset,BSTR *text) {
    return This->lpVtbl->get_textAfterOffset(This,offset,boundaryType,startOffset,endOffset,text);
}
static FORCEINLINE HRESULT IAccessibleText2_get_textAtOffset(IAccessibleText2* This,LONG offset,enum IA2TextBoundaryType boundaryType,LONG *startOffset,LONG *endOffset,BSTR *text) {
    return This->lpVtbl->get_textAtOffset(This,offset,boundaryType,startOffset,endOffset,text);
}
static FORCEINLINE HRESULT IAccessibleText2_removeSelection(IAccessibleText2* This,LONG selectionIndex) {
    return This->lpVtbl->removeSelection(This,selectionIndex);
}
static FORCEINLINE HRESULT IAccessibleText2_setCaretOffset(IAccessibleText2* This,LONG offset) {
    return This->lpVtbl->setCaretOffset(This,offset);
}
static FORCEINLINE HRESULT IAccessibleText2_setSelection(IAccessibleText2* This,LONG selectionIndex,LONG startOffset,LONG endOffset) {
    return This->lpVtbl->setSelection(This,selectionIndex,startOffset,endOffset);
}
static FORCEINLINE HRESULT IAccessibleText2_get_nCharacters(IAccessibleText2* This,LONG *nCharacters) {
    return This->lpVtbl->get_nCharacters(This,nCharacters);
}
static FORCEINLINE HRESULT IAccessibleText2_scrollSubstringTo(IAccessibleText2* This,LONG startIndex,LONG endIndex,enum IA2ScrollType scrollType) {
    return This->lpVtbl->scrollSubstringTo(This,startIndex,endIndex,scrollType);
}
static FORCEINLINE HRESULT IAccessibleText2_scrollSubstringToPoint(IAccessibleText2* This,LONG startIndex,LONG endIndex,enum IA2CoordinateType coordinateType,LONG x,LONG y) {
    return This->lpVtbl->scrollSubstringToPoint(This,startIndex,endIndex,coordinateType,x,y);
}
static FORCEINLINE HRESULT IAccessibleText2_get_newText(IAccessibleText2* This,IA2TextSegment *newText) {
    return This->lpVtbl->get_newText(This,newText);
}
static FORCEINLINE HRESULT IAccessibleText2_get_oldText(IAccessibleText2* This,IA2TextSegment *oldText) {
    return This->lpVtbl->get_oldText(This,oldText);
}
/*** IAccessibleText2 methods ***/
static FORCEINLINE HRESULT IAccessibleText2_get_attributeRange(IAccessibleText2* This,LONG offset,BSTR filter,LONG *startOffset,LONG *endOffset,BSTR *attributeValues) {
    return This->lpVtbl->get_attributeRange(This,offset,filter,startOffset,endOffset,attributeValues);
}
#endif
#endif

#endif


#endif  /* __IAccessibleText2_INTERFACE_DEFINED__ */

/* Begin additional prototypes for all interfaces */

ULONG           __RPC_USER BSTR_UserSize     (ULONG *, ULONG, BSTR *);
unsigned char * __RPC_USER BSTR_UserMarshal  (ULONG *, unsigned char *, BSTR *);
unsigned char * __RPC_USER BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void            __RPC_USER BSTR_UserFree     (ULONG *, BSTR *);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __accessibletext2_h__ */
