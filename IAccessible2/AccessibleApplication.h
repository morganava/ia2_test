/*** Autogenerated by WIDL 3.20 from /home/pospeselr/Code/Tor/tor-browser/other-licenses/ia2/AccessibleApplication.idl - Do not edit ***/

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __accessibleapplication_h__
#define __accessibleapplication_h__

/* Forward declarations */

#ifndef __IAccessibleApplication_FWD_DEFINED__
#define __IAccessibleApplication_FWD_DEFINED__
typedef interface IAccessibleApplication IAccessibleApplication;
#ifdef __cplusplus
interface IAccessibleApplication;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <objidl.h>
#include <oaidl.h>
#include <oleacc.h>

#ifdef __cplusplus
extern "C" {
#endif

/*****************************************************************************
 * IAccessibleApplication interface
 */
#ifndef __IAccessibleApplication_INTERFACE_DEFINED__
#define __IAccessibleApplication_INTERFACE_DEFINED__

DEFINE_GUID(IID_IAccessibleApplication, 0xd49ded83, 0x5b25, 0x43f4, 0x9b,0x95, 0x93,0xb4,0x45,0x95,0x97,0x9e);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("d49ded83-5b25-43f4-9b95-93b44595979e")
IAccessibleApplication : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE get_appName(
        BSTR *name) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_appVersion(
        BSTR *version) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_toolkitName(
        BSTR *name) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_toolkitVersion(
        BSTR *version) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IAccessibleApplication, 0xd49ded83, 0x5b25, 0x43f4, 0x9b,0x95, 0x93,0xb4,0x45,0x95,0x97,0x9e)
#endif
#else
typedef struct IAccessibleApplicationVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IAccessibleApplication *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IAccessibleApplication *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IAccessibleApplication *This);

    /*** IAccessibleApplication methods ***/
    HRESULT (STDMETHODCALLTYPE *get_appName)(
        IAccessibleApplication *This,
        BSTR *name);

    HRESULT (STDMETHODCALLTYPE *get_appVersion)(
        IAccessibleApplication *This,
        BSTR *version);

    HRESULT (STDMETHODCALLTYPE *get_toolkitName)(
        IAccessibleApplication *This,
        BSTR *name);

    HRESULT (STDMETHODCALLTYPE *get_toolkitVersion)(
        IAccessibleApplication *This,
        BSTR *version);

    END_INTERFACE
} IAccessibleApplicationVtbl;

interface IAccessibleApplication {
    CONST_VTBL IAccessibleApplicationVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IAccessibleApplication_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IAccessibleApplication_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IAccessibleApplication_Release(This) (This)->lpVtbl->Release(This)
/*** IAccessibleApplication methods ***/
#define IAccessibleApplication_get_appName(This,name) (This)->lpVtbl->get_appName(This,name)
#define IAccessibleApplication_get_appVersion(This,version) (This)->lpVtbl->get_appVersion(This,version)
#define IAccessibleApplication_get_toolkitName(This,name) (This)->lpVtbl->get_toolkitName(This,name)
#define IAccessibleApplication_get_toolkitVersion(This,version) (This)->lpVtbl->get_toolkitVersion(This,version)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IAccessibleApplication_QueryInterface(IAccessibleApplication* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IAccessibleApplication_AddRef(IAccessibleApplication* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IAccessibleApplication_Release(IAccessibleApplication* This) {
    return This->lpVtbl->Release(This);
}
/*** IAccessibleApplication methods ***/
static FORCEINLINE HRESULT IAccessibleApplication_get_appName(IAccessibleApplication* This,BSTR *name) {
    return This->lpVtbl->get_appName(This,name);
}
static FORCEINLINE HRESULT IAccessibleApplication_get_appVersion(IAccessibleApplication* This,BSTR *version) {
    return This->lpVtbl->get_appVersion(This,version);
}
static FORCEINLINE HRESULT IAccessibleApplication_get_toolkitName(IAccessibleApplication* This,BSTR *name) {
    return This->lpVtbl->get_toolkitName(This,name);
}
static FORCEINLINE HRESULT IAccessibleApplication_get_toolkitVersion(IAccessibleApplication* This,BSTR *version) {
    return This->lpVtbl->get_toolkitVersion(This,version);
}
#endif
#endif

#endif


#endif  /* __IAccessibleApplication_INTERFACE_DEFINED__ */

/* Begin additional prototypes for all interfaces */

ULONG           __RPC_USER BSTR_UserSize     (ULONG *, ULONG, BSTR *);
unsigned char * __RPC_USER BSTR_UserMarshal  (ULONG *, unsigned char *, BSTR *);
unsigned char * __RPC_USER BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void            __RPC_USER BSTR_UserFree     (ULONG *, BSTR *);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __accessibleapplication_h__ */
