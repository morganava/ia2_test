/*** Autogenerated by WIDL 3.20 from /home/pospeselr/Code/Tor/tor-browser/other-licenses/ia2/AccessibleTableCell.idl - Do not edit ***/

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __accessibletablecell_h__
#define __accessibletablecell_h__

/* Forward declarations */

#ifndef __IAccessibleTableCell_FWD_DEFINED__
#define __IAccessibleTableCell_FWD_DEFINED__
typedef interface IAccessibleTableCell IAccessibleTableCell;
#ifdef __cplusplus
interface IAccessibleTableCell;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <objidl.h>
#include <oaidl.h>
#include <oleacc.h>
#include <Accessible2.h>

#ifdef __cplusplus
extern "C" {
#endif

/*****************************************************************************
 * IAccessibleTableCell interface
 */
#ifndef __IAccessibleTableCell_INTERFACE_DEFINED__
#define __IAccessibleTableCell_INTERFACE_DEFINED__

DEFINE_GUID(IID_IAccessibleTableCell, 0x594116b1, 0xc99f, 0x4847, 0xad,0x06, 0x0a,0x7a,0x86,0xec,0xe6,0x45);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("594116b1-c99f-4847-ad06-0a7a86ece645")
IAccessibleTableCell : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE get_columnExtent(
        LONG *nColumnsSpanned) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_columnHeaderCells(
        IUnknown ***cellAccessibles,
        LONG *nColumnHeaderCells) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_columnIndex(
        LONG *columnIndex) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_rowExtent(
        LONG *nRowsSpanned) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_rowHeaderCells(
        IUnknown ***cellAccessibles,
        LONG *nRowHeaderCells) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_rowIndex(
        LONG *rowIndex) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_isSelected(
        boolean *isSelected) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_rowColumnExtents(
        LONG *row,
        LONG *column,
        LONG *rowExtents,
        LONG *columnExtents,
        boolean *isSelected) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_table(
        IUnknown **table) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IAccessibleTableCell, 0x594116b1, 0xc99f, 0x4847, 0xad,0x06, 0x0a,0x7a,0x86,0xec,0xe6,0x45)
#endif
#else
typedef struct IAccessibleTableCellVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IAccessibleTableCell *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IAccessibleTableCell *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IAccessibleTableCell *This);

    /*** IAccessibleTableCell methods ***/
    HRESULT (STDMETHODCALLTYPE *get_columnExtent)(
        IAccessibleTableCell *This,
        LONG *nColumnsSpanned);

    HRESULT (STDMETHODCALLTYPE *get_columnHeaderCells)(
        IAccessibleTableCell *This,
        IUnknown ***cellAccessibles,
        LONG *nColumnHeaderCells);

    HRESULT (STDMETHODCALLTYPE *get_columnIndex)(
        IAccessibleTableCell *This,
        LONG *columnIndex);

    HRESULT (STDMETHODCALLTYPE *get_rowExtent)(
        IAccessibleTableCell *This,
        LONG *nRowsSpanned);

    HRESULT (STDMETHODCALLTYPE *get_rowHeaderCells)(
        IAccessibleTableCell *This,
        IUnknown ***cellAccessibles,
        LONG *nRowHeaderCells);

    HRESULT (STDMETHODCALLTYPE *get_rowIndex)(
        IAccessibleTableCell *This,
        LONG *rowIndex);

    HRESULT (STDMETHODCALLTYPE *get_isSelected)(
        IAccessibleTableCell *This,
        boolean *isSelected);

    HRESULT (STDMETHODCALLTYPE *get_rowColumnExtents)(
        IAccessibleTableCell *This,
        LONG *row,
        LONG *column,
        LONG *rowExtents,
        LONG *columnExtents,
        boolean *isSelected);

    HRESULT (STDMETHODCALLTYPE *get_table)(
        IAccessibleTableCell *This,
        IUnknown **table);

    END_INTERFACE
} IAccessibleTableCellVtbl;

interface IAccessibleTableCell {
    CONST_VTBL IAccessibleTableCellVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IAccessibleTableCell_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IAccessibleTableCell_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IAccessibleTableCell_Release(This) (This)->lpVtbl->Release(This)
/*** IAccessibleTableCell methods ***/
#define IAccessibleTableCell_get_columnExtent(This,nColumnsSpanned) (This)->lpVtbl->get_columnExtent(This,nColumnsSpanned)
#define IAccessibleTableCell_get_columnHeaderCells(This,cellAccessibles,nColumnHeaderCells) (This)->lpVtbl->get_columnHeaderCells(This,cellAccessibles,nColumnHeaderCells)
#define IAccessibleTableCell_get_columnIndex(This,columnIndex) (This)->lpVtbl->get_columnIndex(This,columnIndex)
#define IAccessibleTableCell_get_rowExtent(This,nRowsSpanned) (This)->lpVtbl->get_rowExtent(This,nRowsSpanned)
#define IAccessibleTableCell_get_rowHeaderCells(This,cellAccessibles,nRowHeaderCells) (This)->lpVtbl->get_rowHeaderCells(This,cellAccessibles,nRowHeaderCells)
#define IAccessibleTableCell_get_rowIndex(This,rowIndex) (This)->lpVtbl->get_rowIndex(This,rowIndex)
#define IAccessibleTableCell_get_isSelected(This,isSelected) (This)->lpVtbl->get_isSelected(This,isSelected)
#define IAccessibleTableCell_get_rowColumnExtents(This,row,column,rowExtents,columnExtents,isSelected) (This)->lpVtbl->get_rowColumnExtents(This,row,column,rowExtents,columnExtents,isSelected)
#define IAccessibleTableCell_get_table(This,table) (This)->lpVtbl->get_table(This,table)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IAccessibleTableCell_QueryInterface(IAccessibleTableCell* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IAccessibleTableCell_AddRef(IAccessibleTableCell* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IAccessibleTableCell_Release(IAccessibleTableCell* This) {
    return This->lpVtbl->Release(This);
}
/*** IAccessibleTableCell methods ***/
static FORCEINLINE HRESULT IAccessibleTableCell_get_columnExtent(IAccessibleTableCell* This,LONG *nColumnsSpanned) {
    return This->lpVtbl->get_columnExtent(This,nColumnsSpanned);
}
static FORCEINLINE HRESULT IAccessibleTableCell_get_columnHeaderCells(IAccessibleTableCell* This,IUnknown ***cellAccessibles,LONG *nColumnHeaderCells) {
    return This->lpVtbl->get_columnHeaderCells(This,cellAccessibles,nColumnHeaderCells);
}
static FORCEINLINE HRESULT IAccessibleTableCell_get_columnIndex(IAccessibleTableCell* This,LONG *columnIndex) {
    return This->lpVtbl->get_columnIndex(This,columnIndex);
}
static FORCEINLINE HRESULT IAccessibleTableCell_get_rowExtent(IAccessibleTableCell* This,LONG *nRowsSpanned) {
    return This->lpVtbl->get_rowExtent(This,nRowsSpanned);
}
static FORCEINLINE HRESULT IAccessibleTableCell_get_rowHeaderCells(IAccessibleTableCell* This,IUnknown ***cellAccessibles,LONG *nRowHeaderCells) {
    return This->lpVtbl->get_rowHeaderCells(This,cellAccessibles,nRowHeaderCells);
}
static FORCEINLINE HRESULT IAccessibleTableCell_get_rowIndex(IAccessibleTableCell* This,LONG *rowIndex) {
    return This->lpVtbl->get_rowIndex(This,rowIndex);
}
static FORCEINLINE HRESULT IAccessibleTableCell_get_isSelected(IAccessibleTableCell* This,boolean *isSelected) {
    return This->lpVtbl->get_isSelected(This,isSelected);
}
static FORCEINLINE HRESULT IAccessibleTableCell_get_rowColumnExtents(IAccessibleTableCell* This,LONG *row,LONG *column,LONG *rowExtents,LONG *columnExtents,boolean *isSelected) {
    return This->lpVtbl->get_rowColumnExtents(This,row,column,rowExtents,columnExtents,isSelected);
}
static FORCEINLINE HRESULT IAccessibleTableCell_get_table(IAccessibleTableCell* This,IUnknown **table) {
    return This->lpVtbl->get_table(This,table);
}
#endif
#endif

#endif


#endif  /* __IAccessibleTableCell_INTERFACE_DEFINED__ */

/* Begin additional prototypes for all interfaces */


/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __accessibletablecell_h__ */
