/*** Autogenerated by WIDL 3.20 from /home/pospeselr/Code/Tor/tor-browser/other-licenses/ia2/AccessibleAction.idl - Do not edit ***/

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __accessibleaction_h__
#define __accessibleaction_h__

/* Forward declarations */

#ifndef __IAccessibleAction_FWD_DEFINED__
#define __IAccessibleAction_FWD_DEFINED__
typedef interface IAccessibleAction IAccessibleAction;
#ifdef __cplusplus
interface IAccessibleAction;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <objidl.h>
#include <oaidl.h>
#include <oleacc.h>

#ifdef __cplusplus
extern "C" {
#endif

enum IA2Actions {
    IA2_ACTION_OPEN = -1,
    IA2_ACTION_COMPLETE = -2,
    IA2_ACTION_CLOSE = -3
};
/*****************************************************************************
 * IAccessibleAction interface
 */
#ifndef __IAccessibleAction_INTERFACE_DEFINED__
#define __IAccessibleAction_INTERFACE_DEFINED__

DEFINE_GUID(IID_IAccessibleAction, 0xb70d9f59, 0x3b5a, 0x4dba, 0xab,0x9e, 0x22,0x01,0x2f,0x60,0x7d,0xf5);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("b70d9f59-3b5a-4dba-ab9e-22012f607df5")
IAccessibleAction : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE nActions(
        LONG *nActions) = 0;

    virtual HRESULT STDMETHODCALLTYPE doAction(
        LONG actionIndex) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_description(
        LONG actionIndex,
        BSTR *description) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_keyBinding(
        LONG actionIndex,
        LONG nMaxBindings,
        BSTR **keyBindings,
        LONG *nBindings) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_name(
        LONG actionIndex,
        BSTR *name) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_localizedName(
        LONG actionIndex,
        BSTR *localizedName) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IAccessibleAction, 0xb70d9f59, 0x3b5a, 0x4dba, 0xab,0x9e, 0x22,0x01,0x2f,0x60,0x7d,0xf5)
#endif
#else
typedef struct IAccessibleActionVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IAccessibleAction *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IAccessibleAction *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IAccessibleAction *This);

    /*** IAccessibleAction methods ***/
    HRESULT (STDMETHODCALLTYPE *nActions)(
        IAccessibleAction *This,
        LONG *nActions);

    HRESULT (STDMETHODCALLTYPE *doAction)(
        IAccessibleAction *This,
        LONG actionIndex);

    HRESULT (STDMETHODCALLTYPE *get_description)(
        IAccessibleAction *This,
        LONG actionIndex,
        BSTR *description);

    HRESULT (STDMETHODCALLTYPE *get_keyBinding)(
        IAccessibleAction *This,
        LONG actionIndex,
        LONG nMaxBindings,
        BSTR **keyBindings,
        LONG *nBindings);

    HRESULT (STDMETHODCALLTYPE *get_name)(
        IAccessibleAction *This,
        LONG actionIndex,
        BSTR *name);

    HRESULT (STDMETHODCALLTYPE *get_localizedName)(
        IAccessibleAction *This,
        LONG actionIndex,
        BSTR *localizedName);

    END_INTERFACE
} IAccessibleActionVtbl;

interface IAccessibleAction {
    CONST_VTBL IAccessibleActionVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IAccessibleAction_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IAccessibleAction_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IAccessibleAction_Release(This) (This)->lpVtbl->Release(This)
/*** IAccessibleAction methods ***/
#define IAccessibleAction_nActions(This,nActions) (This)->lpVtbl->nActions(This,nActions)
#define IAccessibleAction_doAction(This,actionIndex) (This)->lpVtbl->doAction(This,actionIndex)
#define IAccessibleAction_get_description(This,actionIndex,description) (This)->lpVtbl->get_description(This,actionIndex,description)
#define IAccessibleAction_get_keyBinding(This,actionIndex,nMaxBindings,keyBindings,nBindings) (This)->lpVtbl->get_keyBinding(This,actionIndex,nMaxBindings,keyBindings,nBindings)
#define IAccessibleAction_get_name(This,actionIndex,name) (This)->lpVtbl->get_name(This,actionIndex,name)
#define IAccessibleAction_get_localizedName(This,actionIndex,localizedName) (This)->lpVtbl->get_localizedName(This,actionIndex,localizedName)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IAccessibleAction_QueryInterface(IAccessibleAction* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IAccessibleAction_AddRef(IAccessibleAction* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IAccessibleAction_Release(IAccessibleAction* This) {
    return This->lpVtbl->Release(This);
}
/*** IAccessibleAction methods ***/
static FORCEINLINE HRESULT IAccessibleAction_nActions(IAccessibleAction* This,LONG *nActions) {
    return This->lpVtbl->nActions(This,nActions);
}
static FORCEINLINE HRESULT IAccessibleAction_doAction(IAccessibleAction* This,LONG actionIndex) {
    return This->lpVtbl->doAction(This,actionIndex);
}
static FORCEINLINE HRESULT IAccessibleAction_get_description(IAccessibleAction* This,LONG actionIndex,BSTR *description) {
    return This->lpVtbl->get_description(This,actionIndex,description);
}
static FORCEINLINE HRESULT IAccessibleAction_get_keyBinding(IAccessibleAction* This,LONG actionIndex,LONG nMaxBindings,BSTR **keyBindings,LONG *nBindings) {
    return This->lpVtbl->get_keyBinding(This,actionIndex,nMaxBindings,keyBindings,nBindings);
}
static FORCEINLINE HRESULT IAccessibleAction_get_name(IAccessibleAction* This,LONG actionIndex,BSTR *name) {
    return This->lpVtbl->get_name(This,actionIndex,name);
}
static FORCEINLINE HRESULT IAccessibleAction_get_localizedName(IAccessibleAction* This,LONG actionIndex,BSTR *localizedName) {
    return This->lpVtbl->get_localizedName(This,actionIndex,localizedName);
}
#endif
#endif

#endif


#endif  /* __IAccessibleAction_INTERFACE_DEFINED__ */

/* Begin additional prototypes for all interfaces */

ULONG           __RPC_USER BSTR_UserSize     (ULONG *, ULONG, BSTR *);
unsigned char * __RPC_USER BSTR_UserMarshal  (ULONG *, unsigned char *, BSTR *);
unsigned char * __RPC_USER BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void            __RPC_USER BSTR_UserFree     (ULONG *, BSTR *);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __accessibleaction_h__ */
