/*** Autogenerated by WIDL 3.20 from /home/pospeselr/Code/Tor/tor-browser/other-licenses/ia2/AccessibleTable2.idl - Do not edit ***/

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __accessibletable2_h__
#define __accessibletable2_h__

/* Forward declarations */

#ifndef __IAccessibleTable2_FWD_DEFINED__
#define __IAccessibleTable2_FWD_DEFINED__
typedef interface IAccessibleTable2 IAccessibleTable2;
#ifdef __cplusplus
interface IAccessibleTable2;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <objidl.h>
#include <oaidl.h>
#include <oleacc.h>
#include <Accessible2.h>
#include <IA2CommonTypes.h>

#ifdef __cplusplus
extern "C" {
#endif

/*****************************************************************************
 * IAccessibleTable2 interface
 */
#ifndef __IAccessibleTable2_INTERFACE_DEFINED__
#define __IAccessibleTable2_INTERFACE_DEFINED__

DEFINE_GUID(IID_IAccessibleTable2, 0x6167f295, 0x06f0, 0x4cdd, 0xa1,0xfa, 0x02,0xe2,0x51,0x53,0xd8,0x69);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("6167f295-06f0-4cdd-a1fa-02e25153d869")
IAccessibleTable2 : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE get_cellAt(
        LONG row,
        LONG column,
        IUnknown **cell) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_caption(
        IUnknown **accessible) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_columnDescription(
        LONG column,
        BSTR *description) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_nColumns(
        LONG *columnCount) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_nRows(
        LONG *rowCount) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_nSelectedCells(
        LONG *cellCount) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_nSelectedColumns(
        LONG *columnCount) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_nSelectedRows(
        LONG *rowCount) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_rowDescription(
        LONG row,
        BSTR *description) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_selectedCells(
        IUnknown ***cells,
        LONG *nSelectedCells) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_selectedColumns(
        LONG **selectedColumns,
        LONG *nColumns) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_selectedRows(
        LONG **selectedRows,
        LONG *nRows) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_summary(
        IUnknown **accessible) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_isColumnSelected(
        LONG column,
        boolean *isSelected) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_isRowSelected(
        LONG row,
        boolean *isSelected) = 0;

    virtual HRESULT STDMETHODCALLTYPE selectRow(
        LONG row) = 0;

    virtual HRESULT STDMETHODCALLTYPE selectColumn(
        LONG column) = 0;

    virtual HRESULT STDMETHODCALLTYPE unselectRow(
        LONG row) = 0;

    virtual HRESULT STDMETHODCALLTYPE unselectColumn(
        LONG column) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_modelChange(
        IA2TableModelChange *modelChange) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IAccessibleTable2, 0x6167f295, 0x06f0, 0x4cdd, 0xa1,0xfa, 0x02,0xe2,0x51,0x53,0xd8,0x69)
#endif
#else
typedef struct IAccessibleTable2Vtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IAccessibleTable2 *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IAccessibleTable2 *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IAccessibleTable2 *This);

    /*** IAccessibleTable2 methods ***/
    HRESULT (STDMETHODCALLTYPE *get_cellAt)(
        IAccessibleTable2 *This,
        LONG row,
        LONG column,
        IUnknown **cell);

    HRESULT (STDMETHODCALLTYPE *get_caption)(
        IAccessibleTable2 *This,
        IUnknown **accessible);

    HRESULT (STDMETHODCALLTYPE *get_columnDescription)(
        IAccessibleTable2 *This,
        LONG column,
        BSTR *description);

    HRESULT (STDMETHODCALLTYPE *get_nColumns)(
        IAccessibleTable2 *This,
        LONG *columnCount);

    HRESULT (STDMETHODCALLTYPE *get_nRows)(
        IAccessibleTable2 *This,
        LONG *rowCount);

    HRESULT (STDMETHODCALLTYPE *get_nSelectedCells)(
        IAccessibleTable2 *This,
        LONG *cellCount);

    HRESULT (STDMETHODCALLTYPE *get_nSelectedColumns)(
        IAccessibleTable2 *This,
        LONG *columnCount);

    HRESULT (STDMETHODCALLTYPE *get_nSelectedRows)(
        IAccessibleTable2 *This,
        LONG *rowCount);

    HRESULT (STDMETHODCALLTYPE *get_rowDescription)(
        IAccessibleTable2 *This,
        LONG row,
        BSTR *description);

    HRESULT (STDMETHODCALLTYPE *get_selectedCells)(
        IAccessibleTable2 *This,
        IUnknown ***cells,
        LONG *nSelectedCells);

    HRESULT (STDMETHODCALLTYPE *get_selectedColumns)(
        IAccessibleTable2 *This,
        LONG **selectedColumns,
        LONG *nColumns);

    HRESULT (STDMETHODCALLTYPE *get_selectedRows)(
        IAccessibleTable2 *This,
        LONG **selectedRows,
        LONG *nRows);

    HRESULT (STDMETHODCALLTYPE *get_summary)(
        IAccessibleTable2 *This,
        IUnknown **accessible);

    HRESULT (STDMETHODCALLTYPE *get_isColumnSelected)(
        IAccessibleTable2 *This,
        LONG column,
        boolean *isSelected);

    HRESULT (STDMETHODCALLTYPE *get_isRowSelected)(
        IAccessibleTable2 *This,
        LONG row,
        boolean *isSelected);

    HRESULT (STDMETHODCALLTYPE *selectRow)(
        IAccessibleTable2 *This,
        LONG row);

    HRESULT (STDMETHODCALLTYPE *selectColumn)(
        IAccessibleTable2 *This,
        LONG column);

    HRESULT (STDMETHODCALLTYPE *unselectRow)(
        IAccessibleTable2 *This,
        LONG row);

    HRESULT (STDMETHODCALLTYPE *unselectColumn)(
        IAccessibleTable2 *This,
        LONG column);

    HRESULT (STDMETHODCALLTYPE *get_modelChange)(
        IAccessibleTable2 *This,
        IA2TableModelChange *modelChange);

    END_INTERFACE
} IAccessibleTable2Vtbl;

interface IAccessibleTable2 {
    CONST_VTBL IAccessibleTable2Vtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IAccessibleTable2_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IAccessibleTable2_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IAccessibleTable2_Release(This) (This)->lpVtbl->Release(This)
/*** IAccessibleTable2 methods ***/
#define IAccessibleTable2_get_cellAt(This,row,column,cell) (This)->lpVtbl->get_cellAt(This,row,column,cell)
#define IAccessibleTable2_get_caption(This,accessible) (This)->lpVtbl->get_caption(This,accessible)
#define IAccessibleTable2_get_columnDescription(This,column,description) (This)->lpVtbl->get_columnDescription(This,column,description)
#define IAccessibleTable2_get_nColumns(This,columnCount) (This)->lpVtbl->get_nColumns(This,columnCount)
#define IAccessibleTable2_get_nRows(This,rowCount) (This)->lpVtbl->get_nRows(This,rowCount)
#define IAccessibleTable2_get_nSelectedCells(This,cellCount) (This)->lpVtbl->get_nSelectedCells(This,cellCount)
#define IAccessibleTable2_get_nSelectedColumns(This,columnCount) (This)->lpVtbl->get_nSelectedColumns(This,columnCount)
#define IAccessibleTable2_get_nSelectedRows(This,rowCount) (This)->lpVtbl->get_nSelectedRows(This,rowCount)
#define IAccessibleTable2_get_rowDescription(This,row,description) (This)->lpVtbl->get_rowDescription(This,row,description)
#define IAccessibleTable2_get_selectedCells(This,cells,nSelectedCells) (This)->lpVtbl->get_selectedCells(This,cells,nSelectedCells)
#define IAccessibleTable2_get_selectedColumns(This,selectedColumns,nColumns) (This)->lpVtbl->get_selectedColumns(This,selectedColumns,nColumns)
#define IAccessibleTable2_get_selectedRows(This,selectedRows,nRows) (This)->lpVtbl->get_selectedRows(This,selectedRows,nRows)
#define IAccessibleTable2_get_summary(This,accessible) (This)->lpVtbl->get_summary(This,accessible)
#define IAccessibleTable2_get_isColumnSelected(This,column,isSelected) (This)->lpVtbl->get_isColumnSelected(This,column,isSelected)
#define IAccessibleTable2_get_isRowSelected(This,row,isSelected) (This)->lpVtbl->get_isRowSelected(This,row,isSelected)
#define IAccessibleTable2_selectRow(This,row) (This)->lpVtbl->selectRow(This,row)
#define IAccessibleTable2_selectColumn(This,column) (This)->lpVtbl->selectColumn(This,column)
#define IAccessibleTable2_unselectRow(This,row) (This)->lpVtbl->unselectRow(This,row)
#define IAccessibleTable2_unselectColumn(This,column) (This)->lpVtbl->unselectColumn(This,column)
#define IAccessibleTable2_get_modelChange(This,modelChange) (This)->lpVtbl->get_modelChange(This,modelChange)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IAccessibleTable2_QueryInterface(IAccessibleTable2* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IAccessibleTable2_AddRef(IAccessibleTable2* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IAccessibleTable2_Release(IAccessibleTable2* This) {
    return This->lpVtbl->Release(This);
}
/*** IAccessibleTable2 methods ***/
static FORCEINLINE HRESULT IAccessibleTable2_get_cellAt(IAccessibleTable2* This,LONG row,LONG column,IUnknown **cell) {
    return This->lpVtbl->get_cellAt(This,row,column,cell);
}
static FORCEINLINE HRESULT IAccessibleTable2_get_caption(IAccessibleTable2* This,IUnknown **accessible) {
    return This->lpVtbl->get_caption(This,accessible);
}
static FORCEINLINE HRESULT IAccessibleTable2_get_columnDescription(IAccessibleTable2* This,LONG column,BSTR *description) {
    return This->lpVtbl->get_columnDescription(This,column,description);
}
static FORCEINLINE HRESULT IAccessibleTable2_get_nColumns(IAccessibleTable2* This,LONG *columnCount) {
    return This->lpVtbl->get_nColumns(This,columnCount);
}
static FORCEINLINE HRESULT IAccessibleTable2_get_nRows(IAccessibleTable2* This,LONG *rowCount) {
    return This->lpVtbl->get_nRows(This,rowCount);
}
static FORCEINLINE HRESULT IAccessibleTable2_get_nSelectedCells(IAccessibleTable2* This,LONG *cellCount) {
    return This->lpVtbl->get_nSelectedCells(This,cellCount);
}
static FORCEINLINE HRESULT IAccessibleTable2_get_nSelectedColumns(IAccessibleTable2* This,LONG *columnCount) {
    return This->lpVtbl->get_nSelectedColumns(This,columnCount);
}
static FORCEINLINE HRESULT IAccessibleTable2_get_nSelectedRows(IAccessibleTable2* This,LONG *rowCount) {
    return This->lpVtbl->get_nSelectedRows(This,rowCount);
}
static FORCEINLINE HRESULT IAccessibleTable2_get_rowDescription(IAccessibleTable2* This,LONG row,BSTR *description) {
    return This->lpVtbl->get_rowDescription(This,row,description);
}
static FORCEINLINE HRESULT IAccessibleTable2_get_selectedCells(IAccessibleTable2* This,IUnknown ***cells,LONG *nSelectedCells) {
    return This->lpVtbl->get_selectedCells(This,cells,nSelectedCells);
}
static FORCEINLINE HRESULT IAccessibleTable2_get_selectedColumns(IAccessibleTable2* This,LONG **selectedColumns,LONG *nColumns) {
    return This->lpVtbl->get_selectedColumns(This,selectedColumns,nColumns);
}
static FORCEINLINE HRESULT IAccessibleTable2_get_selectedRows(IAccessibleTable2* This,LONG **selectedRows,LONG *nRows) {
    return This->lpVtbl->get_selectedRows(This,selectedRows,nRows);
}
static FORCEINLINE HRESULT IAccessibleTable2_get_summary(IAccessibleTable2* This,IUnknown **accessible) {
    return This->lpVtbl->get_summary(This,accessible);
}
static FORCEINLINE HRESULT IAccessibleTable2_get_isColumnSelected(IAccessibleTable2* This,LONG column,boolean *isSelected) {
    return This->lpVtbl->get_isColumnSelected(This,column,isSelected);
}
static FORCEINLINE HRESULT IAccessibleTable2_get_isRowSelected(IAccessibleTable2* This,LONG row,boolean *isSelected) {
    return This->lpVtbl->get_isRowSelected(This,row,isSelected);
}
static FORCEINLINE HRESULT IAccessibleTable2_selectRow(IAccessibleTable2* This,LONG row) {
    return This->lpVtbl->selectRow(This,row);
}
static FORCEINLINE HRESULT IAccessibleTable2_selectColumn(IAccessibleTable2* This,LONG column) {
    return This->lpVtbl->selectColumn(This,column);
}
static FORCEINLINE HRESULT IAccessibleTable2_unselectRow(IAccessibleTable2* This,LONG row) {
    return This->lpVtbl->unselectRow(This,row);
}
static FORCEINLINE HRESULT IAccessibleTable2_unselectColumn(IAccessibleTable2* This,LONG column) {
    return This->lpVtbl->unselectColumn(This,column);
}
static FORCEINLINE HRESULT IAccessibleTable2_get_modelChange(IAccessibleTable2* This,IA2TableModelChange *modelChange) {
    return This->lpVtbl->get_modelChange(This,modelChange);
}
#endif
#endif

#endif


#endif  /* __IAccessibleTable2_INTERFACE_DEFINED__ */

/* Begin additional prototypes for all interfaces */

ULONG           __RPC_USER BSTR_UserSize     (ULONG *, ULONG, BSTR *);
unsigned char * __RPC_USER BSTR_UserMarshal  (ULONG *, unsigned char *, BSTR *);
unsigned char * __RPC_USER BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void            __RPC_USER BSTR_UserFree     (ULONG *, BSTR *);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __accessibletable2_h__ */
