/*** Autogenerated by WIDL 3.20 from /home/pospeselr/Code/Tor/tor-browser/other-licenses/ia2/AccessibleEditableText.idl - Do not edit ***/

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __accessibleeditabletext_h__
#define __accessibleeditabletext_h__

/* Forward declarations */

#ifndef __IAccessibleEditableText_FWD_DEFINED__
#define __IAccessibleEditableText_FWD_DEFINED__
typedef interface IAccessibleEditableText IAccessibleEditableText;
#ifdef __cplusplus
interface IAccessibleEditableText;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <objidl.h>
#include <oaidl.h>
#include <oleacc.h>
#include <IA2CommonTypes.h>

#ifdef __cplusplus
extern "C" {
#endif

/*****************************************************************************
 * IAccessibleEditableText interface
 */
#ifndef __IAccessibleEditableText_INTERFACE_DEFINED__
#define __IAccessibleEditableText_INTERFACE_DEFINED__

DEFINE_GUID(IID_IAccessibleEditableText, 0xa59aa09a, 0x7011, 0x4b65, 0x93,0x9d, 0x32,0xb1,0xfb,0x55,0x47,0xe3);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("a59aa09a-7011-4b65-939d-32b1fb5547e3")
IAccessibleEditableText : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE copyText(
        LONG startOffset,
        LONG endOffset) = 0;

    virtual HRESULT STDMETHODCALLTYPE deleteText(
        LONG startOffset,
        LONG endOffset) = 0;

    virtual HRESULT STDMETHODCALLTYPE insertText(
        LONG offset,
        BSTR *text) = 0;

    virtual HRESULT STDMETHODCALLTYPE cutText(
        LONG startOffset,
        LONG endOffset) = 0;

    virtual HRESULT STDMETHODCALLTYPE pasteText(
        LONG offset) = 0;

    virtual HRESULT STDMETHODCALLTYPE replaceText(
        LONG startOffset,
        LONG endOffset,
        BSTR *text) = 0;

    virtual HRESULT STDMETHODCALLTYPE setAttributes(
        LONG startOffset,
        LONG endOffset,
        BSTR *attributes) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IAccessibleEditableText, 0xa59aa09a, 0x7011, 0x4b65, 0x93,0x9d, 0x32,0xb1,0xfb,0x55,0x47,0xe3)
#endif
#else
typedef struct IAccessibleEditableTextVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IAccessibleEditableText *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IAccessibleEditableText *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IAccessibleEditableText *This);

    /*** IAccessibleEditableText methods ***/
    HRESULT (STDMETHODCALLTYPE *copyText)(
        IAccessibleEditableText *This,
        LONG startOffset,
        LONG endOffset);

    HRESULT (STDMETHODCALLTYPE *deleteText)(
        IAccessibleEditableText *This,
        LONG startOffset,
        LONG endOffset);

    HRESULT (STDMETHODCALLTYPE *insertText)(
        IAccessibleEditableText *This,
        LONG offset,
        BSTR *text);

    HRESULT (STDMETHODCALLTYPE *cutText)(
        IAccessibleEditableText *This,
        LONG startOffset,
        LONG endOffset);

    HRESULT (STDMETHODCALLTYPE *pasteText)(
        IAccessibleEditableText *This,
        LONG offset);

    HRESULT (STDMETHODCALLTYPE *replaceText)(
        IAccessibleEditableText *This,
        LONG startOffset,
        LONG endOffset,
        BSTR *text);

    HRESULT (STDMETHODCALLTYPE *setAttributes)(
        IAccessibleEditableText *This,
        LONG startOffset,
        LONG endOffset,
        BSTR *attributes);

    END_INTERFACE
} IAccessibleEditableTextVtbl;

interface IAccessibleEditableText {
    CONST_VTBL IAccessibleEditableTextVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IAccessibleEditableText_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IAccessibleEditableText_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IAccessibleEditableText_Release(This) (This)->lpVtbl->Release(This)
/*** IAccessibleEditableText methods ***/
#define IAccessibleEditableText_copyText(This,startOffset,endOffset) (This)->lpVtbl->copyText(This,startOffset,endOffset)
#define IAccessibleEditableText_deleteText(This,startOffset,endOffset) (This)->lpVtbl->deleteText(This,startOffset,endOffset)
#define IAccessibleEditableText_insertText(This,offset,text) (This)->lpVtbl->insertText(This,offset,text)
#define IAccessibleEditableText_cutText(This,startOffset,endOffset) (This)->lpVtbl->cutText(This,startOffset,endOffset)
#define IAccessibleEditableText_pasteText(This,offset) (This)->lpVtbl->pasteText(This,offset)
#define IAccessibleEditableText_replaceText(This,startOffset,endOffset,text) (This)->lpVtbl->replaceText(This,startOffset,endOffset,text)
#define IAccessibleEditableText_setAttributes(This,startOffset,endOffset,attributes) (This)->lpVtbl->setAttributes(This,startOffset,endOffset,attributes)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IAccessibleEditableText_QueryInterface(IAccessibleEditableText* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IAccessibleEditableText_AddRef(IAccessibleEditableText* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IAccessibleEditableText_Release(IAccessibleEditableText* This) {
    return This->lpVtbl->Release(This);
}
/*** IAccessibleEditableText methods ***/
static FORCEINLINE HRESULT IAccessibleEditableText_copyText(IAccessibleEditableText* This,LONG startOffset,LONG endOffset) {
    return This->lpVtbl->copyText(This,startOffset,endOffset);
}
static FORCEINLINE HRESULT IAccessibleEditableText_deleteText(IAccessibleEditableText* This,LONG startOffset,LONG endOffset) {
    return This->lpVtbl->deleteText(This,startOffset,endOffset);
}
static FORCEINLINE HRESULT IAccessibleEditableText_insertText(IAccessibleEditableText* This,LONG offset,BSTR *text) {
    return This->lpVtbl->insertText(This,offset,text);
}
static FORCEINLINE HRESULT IAccessibleEditableText_cutText(IAccessibleEditableText* This,LONG startOffset,LONG endOffset) {
    return This->lpVtbl->cutText(This,startOffset,endOffset);
}
static FORCEINLINE HRESULT IAccessibleEditableText_pasteText(IAccessibleEditableText* This,LONG offset) {
    return This->lpVtbl->pasteText(This,offset);
}
static FORCEINLINE HRESULT IAccessibleEditableText_replaceText(IAccessibleEditableText* This,LONG startOffset,LONG endOffset,BSTR *text) {
    return This->lpVtbl->replaceText(This,startOffset,endOffset,text);
}
static FORCEINLINE HRESULT IAccessibleEditableText_setAttributes(IAccessibleEditableText* This,LONG startOffset,LONG endOffset,BSTR *attributes) {
    return This->lpVtbl->setAttributes(This,startOffset,endOffset,attributes);
}
#endif
#endif

#endif


#endif  /* __IAccessibleEditableText_INTERFACE_DEFINED__ */

/* Begin additional prototypes for all interfaces */

ULONG           __RPC_USER BSTR_UserSize     (ULONG *, ULONG, BSTR *);
unsigned char * __RPC_USER BSTR_UserMarshal  (ULONG *, unsigned char *, BSTR *);
unsigned char * __RPC_USER BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void            __RPC_USER BSTR_UserFree     (ULONG *, BSTR *);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __accessibleeditabletext_h__ */
