/*** Autogenerated by WIDL 3.20 from /home/pospeselr/Code/Tor/tor-browser/other-licenses/ia2/AccessibleImage.idl - Do not edit ***/

#ifndef __REQUIRED_RPCNDR_H_VERSION__
#define __REQUIRED_RPCNDR_H_VERSION__ 475
#endif

#include <rpc.h>
#include <rpcndr.h>

#ifndef COM_NO_WINDOWS_H
#include <windows.h>
#include <ole2.h>
#endif

#ifndef __accessibleimage_h__
#define __accessibleimage_h__

/* Forward declarations */

#ifndef __IAccessibleImage_FWD_DEFINED__
#define __IAccessibleImage_FWD_DEFINED__
typedef interface IAccessibleImage IAccessibleImage;
#ifdef __cplusplus
interface IAccessibleImage;
#endif /* __cplusplus */
#endif

/* Headers for imported files */

#include <objidl.h>
#include <oaidl.h>
#include <oleacc.h>
#include <IA2CommonTypes.h>

#ifdef __cplusplus
extern "C" {
#endif

/*****************************************************************************
 * IAccessibleImage interface
 */
#ifndef __IAccessibleImage_INTERFACE_DEFINED__
#define __IAccessibleImage_INTERFACE_DEFINED__

DEFINE_GUID(IID_IAccessibleImage, 0xfe5abb3d, 0x615e, 0x4f7b, 0x90,0x9f, 0x5f,0x0e,0xda,0x9e,0x8d,0xde);
#if defined(__cplusplus) && !defined(CINTERFACE)
MIDL_INTERFACE("fe5abb3d-615e-4f7b-909f-5f0eda9e8dde")
IAccessibleImage : public IUnknown
{
    virtual HRESULT STDMETHODCALLTYPE get_description(
        BSTR *description) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_imagePosition(
        enum IA2CoordinateType coordinateType,
        LONG *x,
        LONG *y) = 0;

    virtual HRESULT STDMETHODCALLTYPE get_imageSize(
        LONG *height,
        LONG *width) = 0;

};
#ifdef __CRT_UUID_DECL
__CRT_UUID_DECL(IAccessibleImage, 0xfe5abb3d, 0x615e, 0x4f7b, 0x90,0x9f, 0x5f,0x0e,0xda,0x9e,0x8d,0xde)
#endif
#else
typedef struct IAccessibleImageVtbl {
    BEGIN_INTERFACE

    /*** IUnknown methods ***/
    HRESULT (STDMETHODCALLTYPE *QueryInterface)(
        IAccessibleImage *This,
        REFIID riid,
        void **ppvObject);

    ULONG (STDMETHODCALLTYPE *AddRef)(
        IAccessibleImage *This);

    ULONG (STDMETHODCALLTYPE *Release)(
        IAccessibleImage *This);

    /*** IAccessibleImage methods ***/
    HRESULT (STDMETHODCALLTYPE *get_description)(
        IAccessibleImage *This,
        BSTR *description);

    HRESULT (STDMETHODCALLTYPE *get_imagePosition)(
        IAccessibleImage *This,
        enum IA2CoordinateType coordinateType,
        LONG *x,
        LONG *y);

    HRESULT (STDMETHODCALLTYPE *get_imageSize)(
        IAccessibleImage *This,
        LONG *height,
        LONG *width);

    END_INTERFACE
} IAccessibleImageVtbl;

interface IAccessibleImage {
    CONST_VTBL IAccessibleImageVtbl* lpVtbl;
};

#ifdef COBJMACROS
#ifndef WIDL_C_INLINE_WRAPPERS
/*** IUnknown methods ***/
#define IAccessibleImage_QueryInterface(This,riid,ppvObject) (This)->lpVtbl->QueryInterface(This,riid,ppvObject)
#define IAccessibleImage_AddRef(This) (This)->lpVtbl->AddRef(This)
#define IAccessibleImage_Release(This) (This)->lpVtbl->Release(This)
/*** IAccessibleImage methods ***/
#define IAccessibleImage_get_description(This,description) (This)->lpVtbl->get_description(This,description)
#define IAccessibleImage_get_imagePosition(This,coordinateType,x,y) (This)->lpVtbl->get_imagePosition(This,coordinateType,x,y)
#define IAccessibleImage_get_imageSize(This,height,width) (This)->lpVtbl->get_imageSize(This,height,width)
#else
/*** IUnknown methods ***/
static FORCEINLINE HRESULT IAccessibleImage_QueryInterface(IAccessibleImage* This,REFIID riid,void **ppvObject) {
    return This->lpVtbl->QueryInterface(This,riid,ppvObject);
}
static FORCEINLINE ULONG IAccessibleImage_AddRef(IAccessibleImage* This) {
    return This->lpVtbl->AddRef(This);
}
static FORCEINLINE ULONG IAccessibleImage_Release(IAccessibleImage* This) {
    return This->lpVtbl->Release(This);
}
/*** IAccessibleImage methods ***/
static FORCEINLINE HRESULT IAccessibleImage_get_description(IAccessibleImage* This,BSTR *description) {
    return This->lpVtbl->get_description(This,description);
}
static FORCEINLINE HRESULT IAccessibleImage_get_imagePosition(IAccessibleImage* This,enum IA2CoordinateType coordinateType,LONG *x,LONG *y) {
    return This->lpVtbl->get_imagePosition(This,coordinateType,x,y);
}
static FORCEINLINE HRESULT IAccessibleImage_get_imageSize(IAccessibleImage* This,LONG *height,LONG *width) {
    return This->lpVtbl->get_imageSize(This,height,width);
}
#endif
#endif

#endif


#endif  /* __IAccessibleImage_INTERFACE_DEFINED__ */

/* Begin additional prototypes for all interfaces */

ULONG           __RPC_USER BSTR_UserSize     (ULONG *, ULONG, BSTR *);
unsigned char * __RPC_USER BSTR_UserMarshal  (ULONG *, unsigned char *, BSTR *);
unsigned char * __RPC_USER BSTR_UserUnmarshal(ULONG *, unsigned char *, BSTR *);
void            __RPC_USER BSTR_UserFree     (ULONG *, BSTR *);

/* End additional prototypes */

#ifdef __cplusplus
}
#endif

#endif /* __accessibleimage_h__ */
